// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onnx.proto3

#include "onnx.proto3.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace onnx {

inline constexpr TensorShapeProto_Dimension::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : denotation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TensorShapeProto_Dimension::TensorShapeProto_Dimension(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TensorShapeProto_DimensionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorShapeProto_DimensionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorShapeProto_DimensionDefaultTypeInternal() {}
  union {
    TensorShapeProto_Dimension _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorShapeProto_DimensionDefaultTypeInternal _TensorShapeProto_Dimension_default_instance_;

inline constexpr TensorProto_Segment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : begin_{::int64_t{0}},
        end_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TensorProto_Segment::TensorProto_Segment(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TensorProto_SegmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorProto_SegmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorProto_SegmentDefaultTypeInternal() {}
  union {
    TensorProto_Segment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorProto_SegmentDefaultTypeInternal _TensorProto_Segment_default_instance_;

inline constexpr StringStringEntryProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StringStringEntryProto::StringStringEntryProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StringStringEntryProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringStringEntryProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringStringEntryProtoDefaultTypeInternal() {}
  union {
    StringStringEntryProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringStringEntryProtoDefaultTypeInternal _StringStringEntryProto_default_instance_;

inline constexpr OperatorSetIdProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : domain_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OperatorSetIdProto::OperatorSetIdProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct OperatorSetIdProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperatorSetIdProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperatorSetIdProtoDefaultTypeInternal() {}
  union {
    OperatorSetIdProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperatorSetIdProtoDefaultTypeInternal _OperatorSetIdProto_default_instance_;

inline constexpr TensorShapeProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : dim_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TensorShapeProto::TensorShapeProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TensorShapeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorShapeProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorShapeProtoDefaultTypeInternal() {}
  union {
    TensorShapeProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorShapeProtoDefaultTypeInternal _TensorShapeProto_default_instance_;

inline constexpr TensorProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dims_{},
        _dims_cached_byte_size_{0},
        float_data_{},
        int32_data_{},
        _int32_data_cached_byte_size_{0},
        string_data_{},
        int64_data_{},
        _int64_data_cached_byte_size_{0},
        double_data_{},
        uint64_data_{},
        _uint64_data_cached_byte_size_{0},
        external_data_{},
        metadata_props_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        raw_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        doc_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        segment_{nullptr},
        data_type_{0},
        data_location_{static_cast< ::onnx::TensorProto_DataLocation >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR TensorProto::TensorProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TensorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorProtoDefaultTypeInternal() {}
  union {
    TensorProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorProtoDefaultTypeInternal _TensorProto_default_instance_;

inline constexpr TensorAnnotation::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : quant_parameter_tensor_names_{},
        tensor_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TensorAnnotation::TensorAnnotation(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TensorAnnotationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorAnnotationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorAnnotationDefaultTypeInternal() {}
  union {
    TensorAnnotation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorAnnotationDefaultTypeInternal _TensorAnnotation_default_instance_;

inline constexpr TypeProto_Tensor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        shape_{nullptr},
        elem_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TypeProto_Tensor::TypeProto_Tensor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TypeProto_TensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_TensorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_TensorDefaultTypeInternal() {}
  union {
    TypeProto_Tensor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_TensorDefaultTypeInternal _TypeProto_Tensor_default_instance_;

inline constexpr TypeProto_SparseTensor::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        shape_{nullptr},
        elem_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TypeProto_SparseTensor::TypeProto_SparseTensor(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TypeProto_SparseTensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_SparseTensorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_SparseTensorDefaultTypeInternal() {}
  union {
    TypeProto_SparseTensor _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_SparseTensorDefaultTypeInternal _TypeProto_SparseTensor_default_instance_;

inline constexpr SparseTensorProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dims_{},
        _dims_cached_byte_size_{0},
        values_{nullptr},
        indices_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SparseTensorProto::SparseTensorProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct SparseTensorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SparseTensorProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SparseTensorProtoDefaultTypeInternal() {}
  union {
    SparseTensorProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SparseTensorProtoDefaultTypeInternal _SparseTensorProto_default_instance_;

inline constexpr TypeProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : denotation_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TypeProto::TypeProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TypeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProtoDefaultTypeInternal() {}
  union {
    TypeProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProtoDefaultTypeInternal _TypeProto_default_instance_;

inline constexpr TypeProto_Map::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        value_type_{nullptr},
        key_type_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TypeProto_Map::TypeProto_Map(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TypeProto_MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_MapDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_MapDefaultTypeInternal() {}
  union {
    TypeProto_Map _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_MapDefaultTypeInternal _TypeProto_Map_default_instance_;

inline constexpr TypeProto_Optional::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        elem_type_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TypeProto_Optional::TypeProto_Optional(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TypeProto_OptionalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_OptionalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_OptionalDefaultTypeInternal() {}
  union {
    TypeProto_Optional _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_OptionalDefaultTypeInternal _TypeProto_Optional_default_instance_;

inline constexpr TypeProto_Sequence::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        elem_type_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TypeProto_Sequence::TypeProto_Sequence(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TypeProto_SequenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeProto_SequenceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeProto_SequenceDefaultTypeInternal() {}
  union {
    TypeProto_Sequence _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeProto_SequenceDefaultTypeInternal _TypeProto_Sequence_default_instance_;

inline constexpr ValueInfoProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        metadata_props_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        doc_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ValueInfoProto::ValueInfoProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ValueInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValueInfoProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValueInfoProtoDefaultTypeInternal() {}
  union {
    ValueInfoProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValueInfoProtoDefaultTypeInternal _ValueInfoProto_default_instance_;

inline constexpr AttributeProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        floats_{},
        ints_{},
        _ints_cached_byte_size_{0},
        strings_{},
        tensors_{},
        graphs_{},
        type_protos_{},
        sparse_tensors_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        s_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        doc_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ref_attr_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        t_{nullptr},
        g_{nullptr},
        tp_{nullptr},
        sparse_tensor_{nullptr},
        i_{::int64_t{0}},
        f_{0},
        type_{static_cast< ::onnx::AttributeProto_AttributeType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AttributeProto::AttributeProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct AttributeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributeProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributeProtoDefaultTypeInternal() {}
  union {
    AttributeProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributeProtoDefaultTypeInternal _AttributeProto_default_instance_;

inline constexpr GraphProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : node_{},
        initializer_{},
        input_{},
        output_{},
        value_info_{},
        quantization_annotation_{},
        sparse_initializer_{},
        metadata_props_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        doc_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GraphProto::GraphProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GraphProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphProtoDefaultTypeInternal() {}
  union {
    GraphProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphProtoDefaultTypeInternal _GraphProto_default_instance_;

inline constexpr NodeProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : input_{},
        output_{},
        attribute_{},
        metadata_props_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        op_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        doc_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        domain_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        overload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR NodeProto::NodeProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct NodeProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NodeProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NodeProtoDefaultTypeInternal() {}
  union {
    NodeProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NodeProtoDefaultTypeInternal _NodeProto_default_instance_;

inline constexpr TrainingInfoProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        initialization_binding_{},
        update_binding_{},
        initialization_{nullptr},
        algorithm_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TrainingInfoProto::TrainingInfoProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct TrainingInfoProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrainingInfoProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrainingInfoProtoDefaultTypeInternal() {}
  union {
    TrainingInfoProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrainingInfoProtoDefaultTypeInternal _TrainingInfoProto_default_instance_;

inline constexpr FunctionProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : input_{},
        output_{},
        attribute_{},
        node_{},
        opset_import_{},
        attribute_proto_{},
        value_info_{},
        metadata_props_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        doc_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        domain_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        overload_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FunctionProto::FunctionProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct FunctionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctionProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctionProtoDefaultTypeInternal() {}
  union {
    FunctionProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctionProtoDefaultTypeInternal _FunctionProto_default_instance_;

inline constexpr ModelProto::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        opset_import_{},
        metadata_props_{},
        training_info_{},
        functions_{},
        producer_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        producer_version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        domain_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        doc_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        graph_{nullptr},
        ir_version_{::int64_t{0}},
        model_version_{::int64_t{0}} {}

template <typename>
PROTOBUF_CONSTEXPR ModelProto::ModelProto(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ModelProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelProtoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelProtoDefaultTypeInternal() {}
  union {
    ModelProto _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelProtoDefaultTypeInternal _ModelProto_default_instance_;
}  // namespace onnx
namespace onnx {
PROTOBUF_CONSTINIT const uint32_t AttributeProto_AttributeType_internal_data_[] = {
    983040u, 0u, };
bool AttributeProto_AttributeType_IsValid(int value) {
  return 0 <= value && value <= 14;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    AttributeProto_AttributeType_strings[15] = {};

static const char AttributeProto_AttributeType_names[] = {
    "FLOAT"
    "FLOATS"
    "GRAPH"
    "GRAPHS"
    "INT"
    "INTS"
    "SPARSE_TENSOR"
    "SPARSE_TENSORS"
    "STRING"
    "STRINGS"
    "TENSOR"
    "TENSORS"
    "TYPE_PROTO"
    "TYPE_PROTOS"
    "UNDEFINED"
};

static const ::google::protobuf::internal::EnumEntry AttributeProto_AttributeType_entries[] =
    {
        {{&AttributeProto_AttributeType_names[0], 5}, 1},
        {{&AttributeProto_AttributeType_names[5], 6}, 6},
        {{&AttributeProto_AttributeType_names[11], 5}, 5},
        {{&AttributeProto_AttributeType_names[16], 6}, 10},
        {{&AttributeProto_AttributeType_names[22], 3}, 2},
        {{&AttributeProto_AttributeType_names[25], 4}, 7},
        {{&AttributeProto_AttributeType_names[29], 13}, 11},
        {{&AttributeProto_AttributeType_names[42], 14}, 12},
        {{&AttributeProto_AttributeType_names[56], 6}, 3},
        {{&AttributeProto_AttributeType_names[62], 7}, 8},
        {{&AttributeProto_AttributeType_names[69], 6}, 4},
        {{&AttributeProto_AttributeType_names[75], 7}, 9},
        {{&AttributeProto_AttributeType_names[82], 10}, 13},
        {{&AttributeProto_AttributeType_names[92], 11}, 14},
        {{&AttributeProto_AttributeType_names[103], 9}, 0},
};

static const int AttributeProto_AttributeType_entries_by_number[] = {
    14,  // 0 -> UNDEFINED
    0,  // 1 -> FLOAT
    4,  // 2 -> INT
    8,  // 3 -> STRING
    10,  // 4 -> TENSOR
    2,  // 5 -> GRAPH
    1,  // 6 -> FLOATS
    5,  // 7 -> INTS
    9,  // 8 -> STRINGS
    11,  // 9 -> TENSORS
    3,  // 10 -> GRAPHS
    6,  // 11 -> SPARSE_TENSOR
    7,  // 12 -> SPARSE_TENSORS
    12,  // 13 -> TYPE_PROTO
    13,  // 14 -> TYPE_PROTOS
};

const std::string& AttributeProto_AttributeType_Name(AttributeProto_AttributeType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          AttributeProto_AttributeType_entries, AttributeProto_AttributeType_entries_by_number,
          15, AttributeProto_AttributeType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      AttributeProto_AttributeType_entries, AttributeProto_AttributeType_entries_by_number, 15,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : AttributeProto_AttributeType_strings[idx].get();
}

bool AttributeProto_AttributeType_Parse(absl::string_view name, AttributeProto_AttributeType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      AttributeProto_AttributeType_entries, 15, name, &int_value);
  if (success) {
    *value = static_cast<AttributeProto_AttributeType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr AttributeProto_AttributeType AttributeProto::UNDEFINED;
constexpr AttributeProto_AttributeType AttributeProto::FLOAT;
constexpr AttributeProto_AttributeType AttributeProto::INT;
constexpr AttributeProto_AttributeType AttributeProto::STRING;
constexpr AttributeProto_AttributeType AttributeProto::TENSOR;
constexpr AttributeProto_AttributeType AttributeProto::GRAPH;
constexpr AttributeProto_AttributeType AttributeProto::SPARSE_TENSOR;
constexpr AttributeProto_AttributeType AttributeProto::TYPE_PROTO;
constexpr AttributeProto_AttributeType AttributeProto::FLOATS;
constexpr AttributeProto_AttributeType AttributeProto::INTS;
constexpr AttributeProto_AttributeType AttributeProto::STRINGS;
constexpr AttributeProto_AttributeType AttributeProto::TENSORS;
constexpr AttributeProto_AttributeType AttributeProto::GRAPHS;
constexpr AttributeProto_AttributeType AttributeProto::SPARSE_TENSORS;
constexpr AttributeProto_AttributeType AttributeProto::TYPE_PROTOS;
constexpr AttributeProto_AttributeType AttributeProto::AttributeType_MIN;
constexpr AttributeProto_AttributeType AttributeProto::AttributeType_MAX;
constexpr int AttributeProto::AttributeType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t TensorProto_DataType_internal_data_[] = {
    1507328u, 0u, };
bool TensorProto_DataType_IsValid(int value) {
  return 0 <= value && value <= 22;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    TensorProto_DataType_strings[23] = {};

static const char TensorProto_DataType_names[] = {
    "BFLOAT16"
    "BOOL"
    "COMPLEX128"
    "COMPLEX64"
    "DOUBLE"
    "FLOAT"
    "FLOAT16"
    "FLOAT8E4M3FN"
    "FLOAT8E4M3FNUZ"
    "FLOAT8E5M2"
    "FLOAT8E5M2FNUZ"
    "INT16"
    "INT32"
    "INT4"
    "INT64"
    "INT8"
    "STRING"
    "UINT16"
    "UINT32"
    "UINT4"
    "UINT64"
    "UINT8"
    "UNDEFINED"
};

static const ::google::protobuf::internal::EnumEntry TensorProto_DataType_entries[] =
    {
        {{&TensorProto_DataType_names[0], 8}, 16},
        {{&TensorProto_DataType_names[8], 4}, 9},
        {{&TensorProto_DataType_names[12], 10}, 15},
        {{&TensorProto_DataType_names[22], 9}, 14},
        {{&TensorProto_DataType_names[31], 6}, 11},
        {{&TensorProto_DataType_names[37], 5}, 1},
        {{&TensorProto_DataType_names[42], 7}, 10},
        {{&TensorProto_DataType_names[49], 12}, 17},
        {{&TensorProto_DataType_names[61], 14}, 18},
        {{&TensorProto_DataType_names[75], 10}, 19},
        {{&TensorProto_DataType_names[85], 14}, 20},
        {{&TensorProto_DataType_names[99], 5}, 5},
        {{&TensorProto_DataType_names[104], 5}, 6},
        {{&TensorProto_DataType_names[109], 4}, 22},
        {{&TensorProto_DataType_names[113], 5}, 7},
        {{&TensorProto_DataType_names[118], 4}, 3},
        {{&TensorProto_DataType_names[122], 6}, 8},
        {{&TensorProto_DataType_names[128], 6}, 4},
        {{&TensorProto_DataType_names[134], 6}, 12},
        {{&TensorProto_DataType_names[140], 5}, 21},
        {{&TensorProto_DataType_names[145], 6}, 13},
        {{&TensorProto_DataType_names[151], 5}, 2},
        {{&TensorProto_DataType_names[156], 9}, 0},
};

static const int TensorProto_DataType_entries_by_number[] = {
    22,  // 0 -> UNDEFINED
    5,  // 1 -> FLOAT
    21,  // 2 -> UINT8
    15,  // 3 -> INT8
    17,  // 4 -> UINT16
    11,  // 5 -> INT16
    12,  // 6 -> INT32
    14,  // 7 -> INT64
    16,  // 8 -> STRING
    1,  // 9 -> BOOL
    6,  // 10 -> FLOAT16
    4,  // 11 -> DOUBLE
    18,  // 12 -> UINT32
    20,  // 13 -> UINT64
    3,  // 14 -> COMPLEX64
    2,  // 15 -> COMPLEX128
    0,  // 16 -> BFLOAT16
    7,  // 17 -> FLOAT8E4M3FN
    8,  // 18 -> FLOAT8E4M3FNUZ
    9,  // 19 -> FLOAT8E5M2
    10,  // 20 -> FLOAT8E5M2FNUZ
    19,  // 21 -> UINT4
    13,  // 22 -> INT4
};

const std::string& TensorProto_DataType_Name(TensorProto_DataType value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          TensorProto_DataType_entries, TensorProto_DataType_entries_by_number,
          23, TensorProto_DataType_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      TensorProto_DataType_entries, TensorProto_DataType_entries_by_number, 23,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : TensorProto_DataType_strings[idx].get();
}

bool TensorProto_DataType_Parse(absl::string_view name, TensorProto_DataType* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      TensorProto_DataType_entries, 23, name, &int_value);
  if (success) {
    *value = static_cast<TensorProto_DataType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TensorProto_DataType TensorProto::UNDEFINED;
constexpr TensorProto_DataType TensorProto::FLOAT;
constexpr TensorProto_DataType TensorProto::UINT8;
constexpr TensorProto_DataType TensorProto::INT8;
constexpr TensorProto_DataType TensorProto::UINT16;
constexpr TensorProto_DataType TensorProto::INT16;
constexpr TensorProto_DataType TensorProto::INT32;
constexpr TensorProto_DataType TensorProto::INT64;
constexpr TensorProto_DataType TensorProto::STRING;
constexpr TensorProto_DataType TensorProto::BOOL;
constexpr TensorProto_DataType TensorProto::FLOAT16;
constexpr TensorProto_DataType TensorProto::DOUBLE;
constexpr TensorProto_DataType TensorProto::UINT32;
constexpr TensorProto_DataType TensorProto::UINT64;
constexpr TensorProto_DataType TensorProto::COMPLEX64;
constexpr TensorProto_DataType TensorProto::COMPLEX128;
constexpr TensorProto_DataType TensorProto::BFLOAT16;
constexpr TensorProto_DataType TensorProto::FLOAT8E4M3FN;
constexpr TensorProto_DataType TensorProto::FLOAT8E4M3FNUZ;
constexpr TensorProto_DataType TensorProto::FLOAT8E5M2;
constexpr TensorProto_DataType TensorProto::FLOAT8E5M2FNUZ;
constexpr TensorProto_DataType TensorProto::UINT4;
constexpr TensorProto_DataType TensorProto::INT4;
constexpr TensorProto_DataType TensorProto::DataType_MIN;
constexpr TensorProto_DataType TensorProto::DataType_MAX;
constexpr int TensorProto::DataType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t TensorProto_DataLocation_internal_data_[] = {
    131072u, 0u, };
bool TensorProto_DataLocation_IsValid(int value) {
  return 0 <= value && value <= 1;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    TensorProto_DataLocation_strings[2] = {};

static const char TensorProto_DataLocation_names[] = {
    "DEFAULT"
    "EXTERNAL"
};

static const ::google::protobuf::internal::EnumEntry TensorProto_DataLocation_entries[] =
    {
        {{&TensorProto_DataLocation_names[0], 7}, 0},
        {{&TensorProto_DataLocation_names[7], 8}, 1},
};

static const int TensorProto_DataLocation_entries_by_number[] = {
    0,  // 0 -> DEFAULT
    1,  // 1 -> EXTERNAL
};

const std::string& TensorProto_DataLocation_Name(TensorProto_DataLocation value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          TensorProto_DataLocation_entries, TensorProto_DataLocation_entries_by_number,
          2, TensorProto_DataLocation_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      TensorProto_DataLocation_entries, TensorProto_DataLocation_entries_by_number, 2,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : TensorProto_DataLocation_strings[idx].get();
}

bool TensorProto_DataLocation_Parse(absl::string_view name, TensorProto_DataLocation* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      TensorProto_DataLocation_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<TensorProto_DataLocation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr TensorProto_DataLocation TensorProto::DEFAULT;
constexpr TensorProto_DataLocation TensorProto::EXTERNAL;
constexpr TensorProto_DataLocation TensorProto::DataLocation_MIN;
constexpr TensorProto_DataLocation TensorProto::DataLocation_MAX;
constexpr int TensorProto::DataLocation_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
PROTOBUF_CONSTINIT const uint32_t Version_internal_data_[] = {
    720896u, 0u, };
bool Version_IsValid(int value) {
  return 0 <= value && value <= 10;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    Version_strings[11] = {};

static const char Version_names[] = {
    "IR_VERSION"
    "IR_VERSION_2017_10_10"
    "IR_VERSION_2017_10_30"
    "IR_VERSION_2017_11_3"
    "IR_VERSION_2019_1_22"
    "IR_VERSION_2019_3_18"
    "IR_VERSION_2019_9_19"
    "IR_VERSION_2020_5_8"
    "IR_VERSION_2021_7_30"
    "IR_VERSION_2023_5_5"
    "_START_VERSION"
};

static const ::google::protobuf::internal::EnumEntry Version_entries[] =
    {
        {{&Version_names[0], 10}, 10},
        {{&Version_names[10], 21}, 1},
        {{&Version_names[31], 21}, 2},
        {{&Version_names[52], 20}, 3},
        {{&Version_names[72], 20}, 4},
        {{&Version_names[92], 20}, 5},
        {{&Version_names[112], 20}, 6},
        {{&Version_names[132], 19}, 7},
        {{&Version_names[151], 20}, 8},
        {{&Version_names[171], 19}, 9},
        {{&Version_names[190], 14}, 0},
};

static const int Version_entries_by_number[] = {
    10,  // 0 -> _START_VERSION
    1,  // 1 -> IR_VERSION_2017_10_10
    2,  // 2 -> IR_VERSION_2017_10_30
    3,  // 3 -> IR_VERSION_2017_11_3
    4,  // 4 -> IR_VERSION_2019_1_22
    5,  // 5 -> IR_VERSION_2019_3_18
    6,  // 6 -> IR_VERSION_2019_9_19
    7,  // 7 -> IR_VERSION_2020_5_8
    8,  // 8 -> IR_VERSION_2021_7_30
    9,  // 9 -> IR_VERSION_2023_5_5
    0,  // 10 -> IR_VERSION
};

const std::string& Version_Name(Version value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          Version_entries, Version_entries_by_number,
          11, Version_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      Version_entries, Version_entries_by_number, 11,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : Version_strings[idx].get();
}

bool Version_Parse(absl::string_view name, Version* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      Version_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<Version>(int_value);
  }
  return success;
}
PROTOBUF_CONSTINIT const uint32_t OperatorStatus_internal_data_[] = {
    131072u, 0u, };
bool OperatorStatus_IsValid(int value) {
  return 0 <= value && value <= 1;
}
static ::google::protobuf::internal::ExplicitlyConstructed<std::string>
    OperatorStatus_strings[2] = {};

static const char OperatorStatus_names[] = {
    "EXPERIMENTAL"
    "STABLE"
};

static const ::google::protobuf::internal::EnumEntry OperatorStatus_entries[] =
    {
        {{&OperatorStatus_names[0], 12}, 0},
        {{&OperatorStatus_names[12], 6}, 1},
};

static const int OperatorStatus_entries_by_number[] = {
    0,  // 0 -> EXPERIMENTAL
    1,  // 1 -> STABLE
};

const std::string& OperatorStatus_Name(OperatorStatus value) {
  static const bool kDummy =
      ::google::protobuf::internal::InitializeEnumStrings(
          OperatorStatus_entries, OperatorStatus_entries_by_number,
          2, OperatorStatus_strings);
  (void)kDummy;

  int idx = ::google::protobuf::internal::LookUpEnumName(
      OperatorStatus_entries, OperatorStatus_entries_by_number, 2,
      value);
  return idx == -1 ? ::google::protobuf::internal::GetEmptyString()
                   : OperatorStatus_strings[idx].get();
}

bool OperatorStatus_Parse(absl::string_view name, OperatorStatus* value) {
  int int_value;
  bool success = ::google::protobuf::internal::LookUpEnumValue(
      OperatorStatus_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<OperatorStatus>(int_value);
  }
  return success;
}
// ===================================================================

class AttributeProto::_Internal {
 public:
  using HasBits = decltype(std::declval<AttributeProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_._has_bits_);
  static const ::onnx::TensorProto& t(const AttributeProto* msg);
  static void set_has_t(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::onnx::GraphProto& g(const AttributeProto* msg);
  static void set_has_g(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::onnx::SparseTensorProto& sparse_tensor(const AttributeProto* msg);
  static void set_has_sparse_tensor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::onnx::TypeProto& tp(const AttributeProto* msg);
  static void set_has_tp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::onnx::TensorProto& AttributeProto::_Internal::t(const AttributeProto* msg) {
  return *msg->_impl_.t_;
}
const ::onnx::GraphProto& AttributeProto::_Internal::g(const AttributeProto* msg) {
  return *msg->_impl_.g_;
}
const ::onnx::SparseTensorProto& AttributeProto::_Internal::sparse_tensor(const AttributeProto* msg) {
  return *msg->_impl_.sparse_tensor_;
}
const ::onnx::TypeProto& AttributeProto::_Internal::tp(const AttributeProto* msg) {
  return *msg->_impl_.tp_;
}
AttributeProto::AttributeProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.AttributeProto)
}
inline PROTOBUF_NDEBUG_INLINE AttributeProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        floats_{visibility, arena, from.floats_},
        ints_{visibility, arena, from.ints_},
        _ints_cached_byte_size_{0},
        strings_{visibility, arena, from.strings_},
        tensors_{visibility, arena, from.tensors_},
        graphs_{visibility, arena, from.graphs_},
        type_protos_{visibility, arena, from.type_protos_},
        sparse_tensors_{visibility, arena, from.sparse_tensors_},
        name_(arena, from.name_),
        s_(arena, from.s_),
        doc_string_(arena, from.doc_string_),
        ref_attr_name_(arena, from.ref_attr_name_) {}

AttributeProto::AttributeProto(
    ::google::protobuf::Arena* arena,
    const AttributeProto& from)
    : ::google::protobuf::MessageLite(arena) {
  AttributeProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.t_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::TensorProto>(arena, *from._impl_.t_)
                : nullptr;
  _impl_.g_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::onnx::GraphProto>(arena, *from._impl_.g_)
                : nullptr;
  _impl_.tp_ = (cached_has_bits & 0x00000004u)
                ? CreateMaybeMessage<::onnx::TypeProto>(arena, *from._impl_.tp_)
                : nullptr;
  _impl_.sparse_tensor_ = (cached_has_bits & 0x00000008u)
                ? CreateMaybeMessage<::onnx::SparseTensorProto>(arena, *from._impl_.sparse_tensor_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, i_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, i_),
           offsetof(Impl_, type_) -
               offsetof(Impl_, i_) +
               sizeof(Impl_::type_));

  // @@protoc_insertion_point(copy_constructor:onnx.AttributeProto)
}
inline PROTOBUF_NDEBUG_INLINE AttributeProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        floats_{visibility, arena},
        ints_{visibility, arena},
        _ints_cached_byte_size_{0},
        strings_{visibility, arena},
        tensors_{visibility, arena},
        graphs_{visibility, arena},
        type_protos_{visibility, arena},
        sparse_tensors_{visibility, arena},
        name_(arena),
        s_(arena),
        doc_string_(arena),
        ref_attr_name_(arena) {}

inline void AttributeProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, t_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, t_) +
               sizeof(Impl_::type_));
}
AttributeProto::~AttributeProto() {
  // @@protoc_insertion_point(destructor:onnx.AttributeProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void AttributeProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.s_.Destroy();
  _impl_.doc_string_.Destroy();
  _impl_.ref_attr_name_.Destroy();
  delete _impl_.t_;
  delete _impl_.g_;
  delete _impl_.tp_;
  delete _impl_.sparse_tensor_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void AttributeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.AttributeProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.floats_.Clear();
  _impl_.ints_.Clear();
  _impl_.strings_.Clear();
  _impl_.tensors_.Clear();
  _impl_.graphs_.Clear();
  _impl_.type_protos_.Clear();
  _impl_.sparse_tensors_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.s_.ClearToEmpty();
  _impl_.doc_string_.ClearToEmpty();
  _impl_.ref_attr_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.t_ != nullptr);
      _impl_.t_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.g_ != nullptr);
      _impl_.g_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.tp_ != nullptr);
      _impl_.tp_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.sparse_tensor_ != nullptr);
      _impl_.sparse_tensor_->Clear();
    }
  }
  ::memset(&_impl_.i_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.i_)) + sizeof(_impl_.type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AttributeProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 8, 71, 2> AttributeProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_._has_bits_),
    0, // no _extensions_
    23, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4287072256,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_AttributeProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.name_)}},
    // float f = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.f_)}},
    // int64 i = 3;
    {::_pbi::TcParser::FastV64S1,
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.i_)}},
    // bytes s = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.s_)}},
    // .onnx.TensorProto t = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.t_)}},
    // .onnx.GraphProto g = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.g_)}},
    // repeated float floats = 7;
    {::_pbi::TcParser::FastF32P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.floats_)}},
    // repeated int64 ints = 8;
    {::_pbi::TcParser::FastV64P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.ints_)}},
    // repeated bytes strings = 9;
    {::_pbi::TcParser::FastBR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.strings_)}},
    // repeated .onnx.TensorProto tensors = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 2, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.tensors_)}},
    // repeated .onnx.GraphProto graphs = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 3, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.graphs_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string doc_string = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.doc_string_)}},
    // .onnx.TypeProto tp = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 2, 4, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.tp_)}},
    // repeated .onnx.TypeProto type_protos = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 5, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.type_protos_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .onnx.AttributeProto.AttributeType type = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.type_)}},
    // string ref_attr_name = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.ref_attr_name_)}},
    // .onnx.SparseTensorProto sparse_tensor = 22;
    {::_pbi::TcParser::FastMtS2,
     {434, 3, 6, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.sparse_tensor_)}},
    // repeated .onnx.SparseTensorProto sparse_tensors = 23;
    {::_pbi::TcParser::FastMtR2,
     {442, 63, 7, PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.sparse_tensors_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float f = 2;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.f_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // int64 i = 3;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.i_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bytes s = 4;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.s_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // .onnx.TensorProto t = 5;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.t_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .onnx.GraphProto g = 6;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.g_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated float floats = 7;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.floats_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated int64 ints = 8;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.ints_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // repeated bytes strings = 9;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.strings_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated .onnx.TensorProto tensors = 10;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.tensors_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.GraphProto graphs = 11;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.graphs_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string doc_string = 13;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.doc_string_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .onnx.TypeProto tp = 14;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.tp_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.TypeProto type_protos = 15;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.type_protos_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .onnx.AttributeProto.AttributeType type = 20;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string ref_attr_name = 21;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.ref_attr_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .onnx.SparseTensorProto sparse_tensor = 22;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.sparse_tensor_), _Internal::kHasBitsOffset + 3, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.SparseTensorProto sparse_tensors = 23;
    {PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.sparse_tensors_), -1, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::GraphProto>()},
    {::_pbi::TcParser::GetTable<::onnx::TensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::GraphProto>()},
    {::_pbi::TcParser::GetTable<::onnx::TypeProto>()},
    {::_pbi::TcParser::GetTable<::onnx::TypeProto>()},
    {::_pbi::TcParser::GetTable<::onnx::SparseTensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::SparseTensorProto>()},
  }}, {{
    "\23\4\0\0\0\0\0\0\0\0\0\0\12\0\0\0\15\0\0\0\0\0\0\0"
    "onnx.AttributeProto"
    "name"
    "doc_string"
    "ref_attr_name"
  }},
};

::uint8_t* AttributeProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.AttributeProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.AttributeProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // float f = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_f = this->_internal_f();
  ::uint32_t raw_f;
  memcpy(&raw_f, &tmp_f, sizeof(tmp_f));
  if (raw_f != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        2, this->_internal_f(), target);
  }

  // int64 i = 3;
  if (this->_internal_i() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<3>(
            stream, this->_internal_i(), target);
  }

  // bytes s = 4;
  if (!this->_internal_s().empty()) {
    const std::string& _s = this->_internal_s();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.TensorProto t = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, _Internal::t(this),
        _Internal::t(this).GetCachedSize(), target, stream);
  }

  // .onnx.GraphProto g = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, _Internal::g(this),
        _Internal::g(this).GetCachedSize(), target, stream);
  }

  // repeated float floats = 7;
  if (this->_internal_floats_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_floats(), target);
  }

  // repeated int64 ints = 8;
  {
    int byte_size = _impl_._ints_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          8, _internal_ints(), byte_size, target);
    }
  }

  // repeated bytes strings = 9;
  for (int i = 0, n = this->_internal_strings_size(); i < n; ++i) {
    const auto& s = this->_internal_strings().Get(i);
    target = stream->WriteBytes(9, s, target);
  }

  // repeated .onnx.TensorProto tensors = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.GraphProto graphs = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_graphs_size()); i < n; i++) {
    const auto& repfield = this->_internal_graphs().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string doc_string = 13;
  if (!this->_internal_doc_string().empty()) {
    const std::string& _s = this->_internal_doc_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.AttributeProto.doc_string");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // .onnx.TypeProto tp = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, _Internal::tp(this),
        _Internal::tp(this).GetCachedSize(), target, stream);
  }

  // repeated .onnx.TypeProto type_protos = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_type_protos_size()); i < n; i++) {
    const auto& repfield = this->_internal_type_protos().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .onnx.AttributeProto.AttributeType type = 20;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        20, this->_internal_type(), target);
  }

  // string ref_attr_name = 21;
  if (!this->_internal_ref_attr_name().empty()) {
    const std::string& _s = this->_internal_ref_attr_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.AttributeProto.ref_attr_name");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // .onnx.SparseTensorProto sparse_tensor = 22;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        22, _Internal::sparse_tensor(this),
        _Internal::sparse_tensor(this).GetCachedSize(), target, stream);
  }

  // repeated .onnx.SparseTensorProto sparse_tensors = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sparse_tensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_sparse_tensors().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.AttributeProto)
  return target;
}

::size_t AttributeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.AttributeProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float floats = 7;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_floats_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int64 ints = 8;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_ints())
    ;
    _impl_._ints_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated bytes strings = 9;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_strings().size());
  for (int i = 0, n = _internal_strings().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_strings().Get(i));
  }
  // repeated .onnx.TensorProto tensors = 10;
  total_size += 1UL * this->_internal_tensors_size();
  for (const auto& msg : this->_internal_tensors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.GraphProto graphs = 11;
  total_size += 1UL * this->_internal_graphs_size();
  for (const auto& msg : this->_internal_graphs()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.TypeProto type_protos = 15;
  total_size += 1UL * this->_internal_type_protos_size();
  for (const auto& msg : this->_internal_type_protos()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.SparseTensorProto sparse_tensors = 23;
  total_size += 2UL * this->_internal_sparse_tensors_size();
  for (const auto& msg : this->_internal_sparse_tensors()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // bytes s = 4;
  if (!this->_internal_s().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_s());
  }

  // string doc_string = 13;
  if (!this->_internal_doc_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_doc_string());
  }

  // string ref_attr_name = 21;
  if (!this->_internal_ref_attr_name().empty()) {
    total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_ref_attr_name());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // .onnx.TensorProto t = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.t_);
    }

    // .onnx.GraphProto g = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.g_);
    }

    // .onnx.TypeProto tp = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.tp_);
    }

    // .onnx.SparseTensorProto sparse_tensor = 22;
    if (cached_has_bits & 0x00000008u) {
      total_size +=
          2 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.sparse_tensor_);
    }

  }
  // int64 i = 3;
  if (this->_internal_i() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_i());
  }

  // float f = 2;
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_f = this->_internal_f();
  ::uint32_t raw_f;
  memcpy(&raw_f, &tmp_f, sizeof(tmp_f));
  if (raw_f != 0) {
    total_size += 5;
  }

  // .onnx.AttributeProto.AttributeType type = 20;
  if (this->_internal_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void AttributeProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AttributeProto*>(
      &from));
}

void AttributeProto::MergeFrom(const AttributeProto& from) {
  AttributeProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.AttributeProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_floats()->MergeFrom(from._internal_floats());
  _this->_internal_mutable_ints()->MergeFrom(from._internal_ints());
  _this->_internal_mutable_strings()->MergeFrom(from._internal_strings());
  _this->_internal_mutable_tensors()->MergeFrom(
      from._internal_tensors());
  _this->_internal_mutable_graphs()->MergeFrom(
      from._internal_graphs());
  _this->_internal_mutable_type_protos()->MergeFrom(
      from._internal_type_protos());
  _this->_internal_mutable_sparse_tensors()->MergeFrom(
      from._internal_sparse_tensors());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_s().empty()) {
    _this->_internal_set_s(from._internal_s());
  }
  if (!from._internal_doc_string().empty()) {
    _this->_internal_set_doc_string(from._internal_doc_string());
  }
  if (!from._internal_ref_attr_name().empty()) {
    _this->_internal_set_ref_attr_name(from._internal_ref_attr_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_t()->::onnx::TensorProto::MergeFrom(
          from._internal_t());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_g()->::onnx::GraphProto::MergeFrom(
          from._internal_g());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tp()->::onnx::TypeProto::MergeFrom(
          from._internal_tp());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_sparse_tensor()->::onnx::SparseTensorProto::MergeFrom(
          from._internal_sparse_tensor());
    }
  }
  if (from._internal_i() != 0) {
    _this->_internal_set_i(from._internal_i());
  }
  static_assert(sizeof(::uint32_t) == sizeof(float),
                "Code assumes ::uint32_t and float are the same size.");
  float tmp_f = from._internal_f();
  ::uint32_t raw_f;
  memcpy(&raw_f, &tmp_f, sizeof(tmp_f));
  if (raw_f != 0) {
    _this->_internal_set_f(from._internal_f());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AttributeProto::CopyFrom(const AttributeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.AttributeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool AttributeProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* AttributeProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void AttributeProto::InternalSwap(AttributeProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.floats_.InternalSwap(&other->_impl_.floats_);
  _impl_.ints_.InternalSwap(&other->_impl_.ints_);
  _impl_.strings_.InternalSwap(&other->_impl_.strings_);
  _impl_.tensors_.InternalSwap(&other->_impl_.tensors_);
  _impl_.graphs_.InternalSwap(&other->_impl_.graphs_);
  _impl_.type_protos_.InternalSwap(&other->_impl_.type_protos_);
  _impl_.sparse_tensors_.InternalSwap(&other->_impl_.sparse_tensors_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.s_, &other->_impl_.s_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.doc_string_, &other->_impl_.doc_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ref_attr_name_, &other->_impl_.ref_attr_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.type_)
      + sizeof(AttributeProto::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(AttributeProto, _impl_.t_)>(
          reinterpret_cast<char*>(&_impl_.t_),
          reinterpret_cast<char*>(&other->_impl_.t_));
}

std::string AttributeProto::GetTypeName() const {
  return "onnx.AttributeProto";
}

// ===================================================================

class ValueInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ValueInfoProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_._has_bits_);
  static const ::onnx::TypeProto& type(const ValueInfoProto* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TypeProto& ValueInfoProto::_Internal::type(const ValueInfoProto* msg) {
  return *msg->_impl_.type_;
}
ValueInfoProto::ValueInfoProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.ValueInfoProto)
}
inline PROTOBUF_NDEBUG_INLINE ValueInfoProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        metadata_props_{visibility, arena, from.metadata_props_},
        name_(arena, from.name_),
        doc_string_(arena, from.doc_string_) {}

ValueInfoProto::ValueInfoProto(
    ::google::protobuf::Arena* arena,
    const ValueInfoProto& from)
    : ::google::protobuf::MessageLite(arena) {
  ValueInfoProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.type_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::TypeProto>(arena, *from._impl_.type_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:onnx.ValueInfoProto)
}
inline PROTOBUF_NDEBUG_INLINE ValueInfoProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        metadata_props_{visibility, arena},
        name_(arena),
        doc_string_(arena) {}

inline void ValueInfoProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
ValueInfoProto::~ValueInfoProto() {
  // @@protoc_insertion_point(destructor:onnx.ValueInfoProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ValueInfoProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.doc_string_.Destroy();
  delete _impl_.type_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ValueInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.ValueInfoProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_props_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.doc_string_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.type_ != nullptr);
    _impl_.type_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ValueInfoProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 42, 2> ValueInfoProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ValueInfoProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .onnx.StringStringEntryProto metadata_props = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 1, PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_.metadata_props_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_.name_)}},
    // .onnx.TypeProto type = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_.type_)}},
    // string doc_string = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_.doc_string_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .onnx.TypeProto type = 2;
    {PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_.type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string doc_string = 3;
    {PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_.doc_string_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.StringStringEntryProto metadata_props = 4;
    {PROTOBUF_FIELD_OFFSET(ValueInfoProto, _impl_.metadata_props_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TypeProto>()},
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
  }}, {{
    "\23\4\0\12\0\0\0\0"
    "onnx.ValueInfoProto"
    "name"
    "doc_string"
  }},
};

::uint8_t* ValueInfoProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.ValueInfoProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.ValueInfoProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.TypeProto type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  // string doc_string = 3;
  if (!this->_internal_doc_string().empty()) {
    const std::string& _s = this->_internal_doc_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.ValueInfoProto.doc_string");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata_props().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.ValueInfoProto)
  return target;
}

::size_t ValueInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.ValueInfoProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.StringStringEntryProto metadata_props = 4;
  total_size += 1UL * this->_internal_metadata_props_size();
  for (const auto& msg : this->_internal_metadata_props()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string doc_string = 3;
  if (!this->_internal_doc_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_doc_string());
  }

  // .onnx.TypeProto type = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ValueInfoProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ValueInfoProto*>(
      &from));
}

void ValueInfoProto::MergeFrom(const ValueInfoProto& from) {
  ValueInfoProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.ValueInfoProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_metadata_props()->MergeFrom(
      from._internal_metadata_props());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_doc_string().empty()) {
    _this->_internal_set_doc_string(from._internal_doc_string());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_type()->::onnx::TypeProto::MergeFrom(
        from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ValueInfoProto::CopyFrom(const ValueInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.ValueInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ValueInfoProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ValueInfoProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ValueInfoProto::InternalSwap(ValueInfoProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.metadata_props_.InternalSwap(&other->_impl_.metadata_props_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.doc_string_, &other->_impl_.doc_string_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

std::string ValueInfoProto::GetTypeName() const {
  return "onnx.ValueInfoProto";
}

// ===================================================================

class NodeProto::_Internal {
 public:
};

NodeProto::NodeProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.NodeProto)
}
inline PROTOBUF_NDEBUG_INLINE NodeProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : input_{visibility, arena, from.input_},
        output_{visibility, arena, from.output_},
        attribute_{visibility, arena, from.attribute_},
        metadata_props_{visibility, arena, from.metadata_props_},
        name_(arena, from.name_),
        op_type_(arena, from.op_type_),
        doc_string_(arena, from.doc_string_),
        domain_(arena, from.domain_),
        overload_(arena, from.overload_),
        _cached_size_{0} {}

NodeProto::NodeProto(
    ::google::protobuf::Arena* arena,
    const NodeProto& from)
    : ::google::protobuf::MessageLite(arena) {
  NodeProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:onnx.NodeProto)
}
inline PROTOBUF_NDEBUG_INLINE NodeProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : input_{visibility, arena},
        output_{visibility, arena},
        attribute_{visibility, arena},
        metadata_props_{visibility, arena},
        name_(arena),
        op_type_(arena),
        doc_string_(arena),
        domain_(arena),
        overload_(arena),
        _cached_size_{0} {}

inline void NodeProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
NodeProto::~NodeProto() {
  // @@protoc_insertion_point(destructor:onnx.NodeProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void NodeProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.op_type_.Destroy();
  _impl_.doc_string_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.overload_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void NodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.NodeProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_.Clear();
  _impl_.output_.Clear();
  _impl_.attribute_.Clear();
  _impl_.metadata_props_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.op_type_.ClearToEmpty();
  _impl_.doc_string_.ClearToEmpty();
  _impl_.domain_.ClearToEmpty();
  _impl_.overload_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* NodeProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 77, 2> NodeProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NodeProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string input = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.input_)}},
    // repeated string output = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.output_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.name_)}},
    // string op_type = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.op_type_)}},
    // repeated .onnx.AttributeProto attribute = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.attribute_)}},
    // string doc_string = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.doc_string_)}},
    // string domain = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.domain_)}},
    // string overload = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.overload_)}},
    // repeated .onnx.StringStringEntryProto metadata_props = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 1, PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.metadata_props_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string input = 1;
    {PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.input_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string output = 2;
    {PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.output_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string op_type = 4;
    {PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.op_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.AttributeProto attribute = 5;
    {PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.attribute_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string doc_string = 6;
    {PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.doc_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string domain = 7;
    {PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.domain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string overload = 8;
    {PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.overload_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.StringStringEntryProto metadata_props = 9;
    {PROTOBUF_FIELD_OFFSET(NodeProto, _impl_.metadata_props_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::AttributeProto>()},
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
  }}, {{
    "\16\5\6\4\7\0\12\6\10\0\0\0\0\0\0\0"
    "onnx.NodeProto"
    "input"
    "output"
    "name"
    "op_type"
    "doc_string"
    "domain"
    "overload"
  }},
};

::uint8_t* NodeProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.NodeProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated string input = 1;
  for (int i = 0, n = this->_internal_input_size(); i < n; ++i) {
    const auto& s = this->_internal_input().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.NodeProto.input");
    target = stream->WriteString(1, s, target);
  }

  // repeated string output = 2;
  for (int i = 0, n = this->_internal_output_size(); i < n; ++i) {
    const auto& s = this->_internal_output().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.NodeProto.output");
    target = stream->WriteString(2, s, target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.NodeProto.name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string op_type = 4;
  if (!this->_internal_op_type().empty()) {
    const std::string& _s = this->_internal_op_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.NodeProto.op_type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated .onnx.AttributeProto attribute = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string doc_string = 6;
  if (!this->_internal_doc_string().empty()) {
    const std::string& _s = this->_internal_doc_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.NodeProto.doc_string");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string domain = 7;
  if (!this->_internal_domain().empty()) {
    const std::string& _s = this->_internal_domain();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.NodeProto.domain");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string overload = 8;
  if (!this->_internal_overload().empty()) {
    const std::string& _s = this->_internal_overload();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.NodeProto.overload");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata_props().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.NodeProto)
  return target;
}

::size_t NodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.NodeProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 1;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_input().size());
  for (int i = 0, n = _internal_input().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_input().Get(i));
  }
  // repeated string output = 2;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_output().size());
  for (int i = 0, n = _internal_output().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_output().Get(i));
  }
  // repeated .onnx.AttributeProto attribute = 5;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->_internal_attribute()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.StringStringEntryProto metadata_props = 9;
  total_size += 1UL * this->_internal_metadata_props_size();
  for (const auto& msg : this->_internal_metadata_props()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string op_type = 4;
  if (!this->_internal_op_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_op_type());
  }

  // string doc_string = 6;
  if (!this->_internal_doc_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_doc_string());
  }

  // string domain = 7;
  if (!this->_internal_domain().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_domain());
  }

  // string overload = 8;
  if (!this->_internal_overload().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_overload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void NodeProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NodeProto*>(
      &from));
}

void NodeProto::MergeFrom(const NodeProto& from) {
  NodeProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.NodeProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_input()->MergeFrom(from._internal_input());
  _this->_internal_mutable_output()->MergeFrom(from._internal_output());
  _this->_internal_mutable_attribute()->MergeFrom(
      from._internal_attribute());
  _this->_internal_mutable_metadata_props()->MergeFrom(
      from._internal_metadata_props());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_op_type().empty()) {
    _this->_internal_set_op_type(from._internal_op_type());
  }
  if (!from._internal_doc_string().empty()) {
    _this->_internal_set_doc_string(from._internal_doc_string());
  }
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (!from._internal_overload().empty()) {
    _this->_internal_set_overload(from._internal_overload());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NodeProto::CopyFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.NodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NodeProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* NodeProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void NodeProto::InternalSwap(NodeProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_.InternalSwap(&other->_impl_.input_);
  _impl_.output_.InternalSwap(&other->_impl_.output_);
  _impl_.attribute_.InternalSwap(&other->_impl_.attribute_);
  _impl_.metadata_props_.InternalSwap(&other->_impl_.metadata_props_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.op_type_, &other->_impl_.op_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.doc_string_, &other->_impl_.doc_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, &other->_impl_.domain_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.overload_, &other->_impl_.overload_, arena);
}

std::string NodeProto::GetTypeName() const {
  return "onnx.NodeProto";
}

// ===================================================================

class TrainingInfoProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TrainingInfoProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_._has_bits_);
  static const ::onnx::GraphProto& initialization(const TrainingInfoProto* msg);
  static void set_has_initialization(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::onnx::GraphProto& algorithm(const TrainingInfoProto* msg);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::onnx::GraphProto& TrainingInfoProto::_Internal::initialization(const TrainingInfoProto* msg) {
  return *msg->_impl_.initialization_;
}
const ::onnx::GraphProto& TrainingInfoProto::_Internal::algorithm(const TrainingInfoProto* msg) {
  return *msg->_impl_.algorithm_;
}
TrainingInfoProto::TrainingInfoProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TrainingInfoProto)
}
inline PROTOBUF_NDEBUG_INLINE TrainingInfoProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        initialization_binding_{visibility, arena, from.initialization_binding_},
        update_binding_{visibility, arena, from.update_binding_} {}

TrainingInfoProto::TrainingInfoProto(
    ::google::protobuf::Arena* arena,
    const TrainingInfoProto& from)
    : ::google::protobuf::MessageLite(arena) {
  TrainingInfoProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.initialization_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::GraphProto>(arena, *from._impl_.initialization_)
                : nullptr;
  _impl_.algorithm_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::onnx::GraphProto>(arena, *from._impl_.algorithm_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:onnx.TrainingInfoProto)
}
inline PROTOBUF_NDEBUG_INLINE TrainingInfoProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        initialization_binding_{visibility, arena},
        update_binding_{visibility, arena} {}

inline void TrainingInfoProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initialization_),
           0,
           offsetof(Impl_, algorithm_) -
               offsetof(Impl_, initialization_) +
               sizeof(Impl_::algorithm_));
}
TrainingInfoProto::~TrainingInfoProto() {
  // @@protoc_insertion_point(destructor:onnx.TrainingInfoProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TrainingInfoProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.initialization_;
  delete _impl_.algorithm_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TrainingInfoProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TrainingInfoProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.initialization_binding_.Clear();
  _impl_.update_binding_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.initialization_ != nullptr);
      _impl_.initialization_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.algorithm_ != nullptr);
      _impl_.algorithm_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TrainingInfoProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> TrainingInfoProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TrainingInfoProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .onnx.StringStringEntryProto update_binding = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.update_binding_)}},
    // .onnx.GraphProto initialization = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.initialization_)}},
    // .onnx.GraphProto algorithm = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.algorithm_)}},
    // repeated .onnx.StringStringEntryProto initialization_binding = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.initialization_binding_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .onnx.GraphProto initialization = 1;
    {PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.initialization_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .onnx.GraphProto algorithm = 2;
    {PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.algorithm_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.StringStringEntryProto initialization_binding = 3;
    {PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.initialization_binding_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.StringStringEntryProto update_binding = 4;
    {PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.update_binding_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::GraphProto>()},
    {::_pbi::TcParser::GetTable<::onnx::GraphProto>()},
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
  }}, {{
  }},
};

::uint8_t* TrainingInfoProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TrainingInfoProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.GraphProto initialization = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::initialization(this),
        _Internal::initialization(this).GetCachedSize(), target, stream);
  }

  // .onnx.GraphProto algorithm = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::algorithm(this),
        _Internal::algorithm(this).GetCachedSize(), target, stream);
  }

  // repeated .onnx.StringStringEntryProto initialization_binding = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_initialization_binding_size()); i < n; i++) {
    const auto& repfield = this->_internal_initialization_binding().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.StringStringEntryProto update_binding = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_update_binding_size()); i < n; i++) {
    const auto& repfield = this->_internal_update_binding().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TrainingInfoProto)
  return target;
}

::size_t TrainingInfoProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TrainingInfoProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.StringStringEntryProto initialization_binding = 3;
  total_size += 1UL * this->_internal_initialization_binding_size();
  for (const auto& msg : this->_internal_initialization_binding()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.StringStringEntryProto update_binding = 4;
  total_size += 1UL * this->_internal_update_binding_size();
  for (const auto& msg : this->_internal_update_binding()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .onnx.GraphProto initialization = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.initialization_);
    }

    // .onnx.GraphProto algorithm = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.algorithm_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TrainingInfoProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TrainingInfoProto*>(
      &from));
}

void TrainingInfoProto::MergeFrom(const TrainingInfoProto& from) {
  TrainingInfoProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TrainingInfoProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_initialization_binding()->MergeFrom(
      from._internal_initialization_binding());
  _this->_internal_mutable_update_binding()->MergeFrom(
      from._internal_update_binding());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_initialization()->::onnx::GraphProto::MergeFrom(
          from._internal_initialization());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_algorithm()->::onnx::GraphProto::MergeFrom(
          from._internal_algorithm());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TrainingInfoProto::CopyFrom(const TrainingInfoProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TrainingInfoProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TrainingInfoProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TrainingInfoProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TrainingInfoProto::InternalSwap(TrainingInfoProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.initialization_binding_.InternalSwap(&other->_impl_.initialization_binding_);
  _impl_.update_binding_.InternalSwap(&other->_impl_.update_binding_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.algorithm_)
      + sizeof(TrainingInfoProto::_impl_.algorithm_)
      - PROTOBUF_FIELD_OFFSET(TrainingInfoProto, _impl_.initialization_)>(
          reinterpret_cast<char*>(&_impl_.initialization_),
          reinterpret_cast<char*>(&other->_impl_.initialization_));
}

std::string TrainingInfoProto::GetTypeName() const {
  return "onnx.TrainingInfoProto";
}

// ===================================================================

class ModelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<ModelProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ModelProto, _impl_._has_bits_);
  static const ::onnx::GraphProto& graph(const ModelProto* msg);
  static void set_has_graph(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::GraphProto& ModelProto::_Internal::graph(const ModelProto* msg) {
  return *msg->_impl_.graph_;
}
ModelProto::ModelProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.ModelProto)
}
inline PROTOBUF_NDEBUG_INLINE ModelProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        opset_import_{visibility, arena, from.opset_import_},
        metadata_props_{visibility, arena, from.metadata_props_},
        training_info_{visibility, arena, from.training_info_},
        functions_{visibility, arena, from.functions_},
        producer_name_(arena, from.producer_name_),
        producer_version_(arena, from.producer_version_),
        domain_(arena, from.domain_),
        doc_string_(arena, from.doc_string_) {}

ModelProto::ModelProto(
    ::google::protobuf::Arena* arena,
    const ModelProto& from)
    : ::google::protobuf::MessageLite(arena) {
  ModelProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.graph_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::GraphProto>(arena, *from._impl_.graph_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ir_version_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ir_version_),
           offsetof(Impl_, model_version_) -
               offsetof(Impl_, ir_version_) +
               sizeof(Impl_::model_version_));

  // @@protoc_insertion_point(copy_constructor:onnx.ModelProto)
}
inline PROTOBUF_NDEBUG_INLINE ModelProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        opset_import_{visibility, arena},
        metadata_props_{visibility, arena},
        training_info_{visibility, arena},
        functions_{visibility, arena},
        producer_name_(arena),
        producer_version_(arena),
        domain_(arena),
        doc_string_(arena) {}

inline void ModelProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, graph_),
           0,
           offsetof(Impl_, model_version_) -
               offsetof(Impl_, graph_) +
               sizeof(Impl_::model_version_));
}
ModelProto::~ModelProto() {
  // @@protoc_insertion_point(destructor:onnx.ModelProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void ModelProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.producer_name_.Destroy();
  _impl_.producer_version_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.doc_string_.Destroy();
  delete _impl_.graph_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.ModelProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.opset_import_.Clear();
  _impl_.metadata_props_.Clear();
  _impl_.training_info_.Clear();
  _impl_.functions_.Clear();
  _impl_.producer_name_.ClearToEmpty();
  _impl_.producer_version_.ClearToEmpty();
  _impl_.domain_.ClearToEmpty();
  _impl_.doc_string_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.graph_ != nullptr);
    _impl_.graph_->Clear();
  }
  ::memset(&_impl_.ir_version_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.model_version_) -
      reinterpret_cast<char*>(&_impl_.ir_version_)) + sizeof(_impl_.model_version_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ModelProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 5, 77, 2> ModelProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ModelProto, _impl_._has_bits_),
    0, // no _extensions_
    25, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4277657344,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_ModelProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int64 ir_version = 1;
    {::_pbi::TcParser::FastV64S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.ir_version_)}},
    // string producer_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.producer_name_)}},
    // string producer_version = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.producer_version_)}},
    // string domain = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.domain_)}},
    // int64 model_version = 5;
    {::_pbi::TcParser::FastV64S1,
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.model_version_)}},
    // string doc_string = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.doc_string_)}},
    // .onnx.GraphProto graph = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.graph_)}},
    // repeated .onnx.OperatorSetIdProto opset_import = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 1, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.opset_import_)}},
    // repeated .onnx.FunctionProto functions = 25;
    {::_pbi::TcParser::FastMtR2,
     {458, 63, 4, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.functions_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .onnx.StringStringEntryProto metadata_props = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 2, PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.metadata_props_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 ir_version = 1;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.ir_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string producer_name = 2;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.producer_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string producer_version = 3;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.producer_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string domain = 4;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.domain_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 model_version = 5;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.model_version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string doc_string = 6;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.doc_string_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .onnx.GraphProto graph = 7;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.graph_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.OperatorSetIdProto opset_import = 8;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.opset_import_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.StringStringEntryProto metadata_props = 14;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.metadata_props_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.TrainingInfoProto training_info = 20;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.training_info_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.FunctionProto functions = 25;
    {PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.functions_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::GraphProto>()},
    {::_pbi::TcParser::GetTable<::onnx::OperatorSetIdProto>()},
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
    {::_pbi::TcParser::GetTable<::onnx::TrainingInfoProto>()},
    {::_pbi::TcParser::GetTable<::onnx::FunctionProto>()},
  }}, {{
    "\17\0\15\20\6\0\12\0\0\0\0\0\0\0\0\0"
    "onnx.ModelProto"
    "producer_name"
    "producer_version"
    "domain"
    "doc_string"
  }},
};

::uint8_t* ModelProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.ModelProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 ir_version = 1;
  if (this->_internal_ir_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_ir_version(), target);
  }

  // string producer_name = 2;
  if (!this->_internal_producer_name().empty()) {
    const std::string& _s = this->_internal_producer_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.ModelProto.producer_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string producer_version = 3;
  if (!this->_internal_producer_version().empty()) {
    const std::string& _s = this->_internal_producer_version();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.ModelProto.producer_version");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string domain = 4;
  if (!this->_internal_domain().empty()) {
    const std::string& _s = this->_internal_domain();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.ModelProto.domain");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // int64 model_version = 5;
  if (this->_internal_model_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<5>(
            stream, this->_internal_model_version(), target);
  }

  // string doc_string = 6;
  if (!this->_internal_doc_string().empty()) {
    const std::string& _s = this->_internal_doc_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.ModelProto.doc_string");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.GraphProto graph = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, _Internal::graph(this),
        _Internal::graph(this).GetCachedSize(), target, stream);
  }

  // repeated .onnx.OperatorSetIdProto opset_import = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opset_import_size()); i < n; i++) {
    const auto& repfield = this->_internal_opset_import().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata_props().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.TrainingInfoProto training_info = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_training_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_training_info().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.FunctionProto functions = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_functions_size()); i < n; i++) {
    const auto& repfield = this->_internal_functions().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.ModelProto)
  return target;
}

::size_t ModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.ModelProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.OperatorSetIdProto opset_import = 8;
  total_size += 1UL * this->_internal_opset_import_size();
  for (const auto& msg : this->_internal_opset_import()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  total_size += 1UL * this->_internal_metadata_props_size();
  for (const auto& msg : this->_internal_metadata_props()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.TrainingInfoProto training_info = 20;
  total_size += 2UL * this->_internal_training_info_size();
  for (const auto& msg : this->_internal_training_info()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.FunctionProto functions = 25;
  total_size += 2UL * this->_internal_functions_size();
  for (const auto& msg : this->_internal_functions()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string producer_name = 2;
  if (!this->_internal_producer_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_producer_name());
  }

  // string producer_version = 3;
  if (!this->_internal_producer_version().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_producer_version());
  }

  // string domain = 4;
  if (!this->_internal_domain().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_domain());
  }

  // string doc_string = 6;
  if (!this->_internal_doc_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_doc_string());
  }

  // .onnx.GraphProto graph = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.graph_);
  }

  // int64 ir_version = 1;
  if (this->_internal_ir_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_ir_version());
  }

  // int64 model_version = 5;
  if (this->_internal_model_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_model_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void ModelProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ModelProto*>(
      &from));
}

void ModelProto::MergeFrom(const ModelProto& from) {
  ModelProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.ModelProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_opset_import()->MergeFrom(
      from._internal_opset_import());
  _this->_internal_mutable_metadata_props()->MergeFrom(
      from._internal_metadata_props());
  _this->_internal_mutable_training_info()->MergeFrom(
      from._internal_training_info());
  _this->_internal_mutable_functions()->MergeFrom(
      from._internal_functions());
  if (!from._internal_producer_name().empty()) {
    _this->_internal_set_producer_name(from._internal_producer_name());
  }
  if (!from._internal_producer_version().empty()) {
    _this->_internal_set_producer_version(from._internal_producer_version());
  }
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (!from._internal_doc_string().empty()) {
    _this->_internal_set_doc_string(from._internal_doc_string());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_graph()->::onnx::GraphProto::MergeFrom(
        from._internal_graph());
  }
  if (from._internal_ir_version() != 0) {
    _this->_internal_set_ir_version(from._internal_ir_version());
  }
  if (from._internal_model_version() != 0) {
    _this->_internal_set_model_version(from._internal_model_version());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ModelProto::CopyFrom(const ModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.ModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ModelProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ModelProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ModelProto::InternalSwap(ModelProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.opset_import_.InternalSwap(&other->_impl_.opset_import_);
  _impl_.metadata_props_.InternalSwap(&other->_impl_.metadata_props_);
  _impl_.training_info_.InternalSwap(&other->_impl_.training_info_);
  _impl_.functions_.InternalSwap(&other->_impl_.functions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.producer_name_, &other->_impl_.producer_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.producer_version_, &other->_impl_.producer_version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, &other->_impl_.domain_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.doc_string_, &other->_impl_.doc_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.model_version_)
      + sizeof(ModelProto::_impl_.model_version_)
      - PROTOBUF_FIELD_OFFSET(ModelProto, _impl_.graph_)>(
          reinterpret_cast<char*>(&_impl_.graph_),
          reinterpret_cast<char*>(&other->_impl_.graph_));
}

std::string ModelProto::GetTypeName() const {
  return "onnx.ModelProto";
}

// ===================================================================

class StringStringEntryProto::_Internal {
 public:
};

StringStringEntryProto::StringStringEntryProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.StringStringEntryProto)
}
inline PROTOBUF_NDEBUG_INLINE StringStringEntryProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : key_(arena, from.key_),
        value_(arena, from.value_),
        _cached_size_{0} {}

StringStringEntryProto::StringStringEntryProto(
    ::google::protobuf::Arena* arena,
    const StringStringEntryProto& from)
    : ::google::protobuf::MessageLite(arena) {
  StringStringEntryProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:onnx.StringStringEntryProto)
}
inline PROTOBUF_NDEBUG_INLINE StringStringEntryProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : key_(arena),
        value_(arena),
        _cached_size_{0} {}

inline void StringStringEntryProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StringStringEntryProto::~StringStringEntryProto() {
  // @@protoc_insertion_point(destructor:onnx.StringStringEntryProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void StringStringEntryProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StringStringEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.StringStringEntryProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* StringStringEntryProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 44, 2> StringStringEntryProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StringStringEntryProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // string value = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StringStringEntryProto, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StringStringEntryProto, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(StringStringEntryProto, _impl_.key_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2;
    {PROTOBUF_FIELD_OFFSET(StringStringEntryProto, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\33\3\5\0\0\0\0\0"
    "onnx.StringStringEntryProto"
    "key"
    "value"
  }},
};

::uint8_t* StringStringEntryProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.StringStringEntryProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.StringStringEntryProto.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    const std::string& _s = this->_internal_value();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.StringStringEntryProto.value");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.StringStringEntryProto)
  return target;
}

::size_t StringStringEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.StringStringEntryProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_key());
  }

  // string value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void StringStringEntryProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StringStringEntryProto*>(
      &from));
}

void StringStringEntryProto::MergeFrom(const StringStringEntryProto& from) {
  StringStringEntryProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.StringStringEntryProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StringStringEntryProto::CopyFrom(const StringStringEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.StringStringEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StringStringEntryProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StringStringEntryProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StringStringEntryProto::InternalSwap(StringStringEntryProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.value_, &other->_impl_.value_, arena);
}

std::string StringStringEntryProto::GetTypeName() const {
  return "onnx.StringStringEntryProto";
}

// ===================================================================

class TensorAnnotation::_Internal {
 public:
};

TensorAnnotation::TensorAnnotation(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorAnnotation)
}
inline PROTOBUF_NDEBUG_INLINE TensorAnnotation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : quant_parameter_tensor_names_{visibility, arena, from.quant_parameter_tensor_names_},
        tensor_name_(arena, from.tensor_name_),
        _cached_size_{0} {}

TensorAnnotation::TensorAnnotation(
    ::google::protobuf::Arena* arena,
    const TensorAnnotation& from)
    : ::google::protobuf::MessageLite(arena) {
  TensorAnnotation* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:onnx.TensorAnnotation)
}
inline PROTOBUF_NDEBUG_INLINE TensorAnnotation::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : quant_parameter_tensor_names_{visibility, arena},
        tensor_name_(arena),
        _cached_size_{0} {}

inline void TensorAnnotation::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TensorAnnotation::~TensorAnnotation() {
  // @@protoc_insertion_point(destructor:onnx.TensorAnnotation)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TensorAnnotation::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.tensor_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TensorAnnotation::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorAnnotation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quant_parameter_tensor_names_.Clear();
  _impl_.tensor_name_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* TensorAnnotation::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 41, 2> TensorAnnotation::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TensorAnnotation_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TensorAnnotation, _impl_.quant_parameter_tensor_names_)}},
    // string tensor_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TensorAnnotation, _impl_.tensor_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string tensor_name = 1;
    {PROTOBUF_FIELD_OFFSET(TensorAnnotation, _impl_.tensor_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
    {PROTOBUF_FIELD_OFFSET(TensorAnnotation, _impl_.quant_parameter_tensor_names_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
  }}, {{
    "\25\13\0\0\0\0\0\0"
    "onnx.TensorAnnotation"
    "tensor_name"
  }},
};

::uint8_t* TensorAnnotation::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorAnnotation)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string tensor_name = 1;
  if (!this->_internal_tensor_name().empty()) {
    const std::string& _s = this->_internal_tensor_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.TensorAnnotation.tensor_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quant_parameter_tensor_names_size()); i < n; i++) {
    const auto& repfield = this->_internal_quant_parameter_tensor_names().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorAnnotation)
  return target;
}

::size_t TensorAnnotation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorAnnotation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.StringStringEntryProto quant_parameter_tensor_names = 2;
  total_size += 1UL * this->_internal_quant_parameter_tensor_names_size();
  for (const auto& msg : this->_internal_quant_parameter_tensor_names()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string tensor_name = 1;
  if (!this->_internal_tensor_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_tensor_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TensorAnnotation::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TensorAnnotation*>(
      &from));
}

void TensorAnnotation::MergeFrom(const TensorAnnotation& from) {
  TensorAnnotation* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorAnnotation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_quant_parameter_tensor_names()->MergeFrom(
      from._internal_quant_parameter_tensor_names());
  if (!from._internal_tensor_name().empty()) {
    _this->_internal_set_tensor_name(from._internal_tensor_name());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TensorAnnotation::CopyFrom(const TensorAnnotation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorAnnotation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TensorAnnotation::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TensorAnnotation::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TensorAnnotation::InternalSwap(TensorAnnotation* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.quant_parameter_tensor_names_.InternalSwap(&other->_impl_.quant_parameter_tensor_names_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tensor_name_, &other->_impl_.tensor_name_, arena);
}

std::string TensorAnnotation::GetTypeName() const {
  return "onnx.TensorAnnotation";
}

// ===================================================================

class GraphProto::_Internal {
 public:
};

GraphProto::GraphProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.GraphProto)
}
inline PROTOBUF_NDEBUG_INLINE GraphProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : node_{visibility, arena, from.node_},
        initializer_{visibility, arena, from.initializer_},
        input_{visibility, arena, from.input_},
        output_{visibility, arena, from.output_},
        value_info_{visibility, arena, from.value_info_},
        quantization_annotation_{visibility, arena, from.quantization_annotation_},
        sparse_initializer_{visibility, arena, from.sparse_initializer_},
        metadata_props_{visibility, arena, from.metadata_props_},
        name_(arena, from.name_),
        doc_string_(arena, from.doc_string_),
        _cached_size_{0} {}

GraphProto::GraphProto(
    ::google::protobuf::Arena* arena,
    const GraphProto& from)
    : ::google::protobuf::MessageLite(arena) {
  GraphProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:onnx.GraphProto)
}
inline PROTOBUF_NDEBUG_INLINE GraphProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : node_{visibility, arena},
        initializer_{visibility, arena},
        input_{visibility, arena},
        output_{visibility, arena},
        value_info_{visibility, arena},
        quantization_annotation_{visibility, arena},
        sparse_initializer_{visibility, arena},
        metadata_props_{visibility, arena},
        name_(arena),
        doc_string_(arena),
        _cached_size_{0} {}

inline void GraphProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GraphProto::~GraphProto() {
  // @@protoc_insertion_point(destructor:onnx.GraphProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void GraphProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.doc_string_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GraphProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.GraphProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.Clear();
  _impl_.initializer_.Clear();
  _impl_.input_.Clear();
  _impl_.output_.Clear();
  _impl_.value_info_.Clear();
  _impl_.quantization_annotation_.Clear();
  _impl_.sparse_initializer_.Clear();
  _impl_.metadata_props_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.doc_string_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* GraphProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 8, 46, 2> GraphProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294902252,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GraphProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .onnx.StringStringEntryProto metadata_props = 16;
    {::_pbi::TcParser::FastMtR2,
     {386, 63, 7, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.metadata_props_)}},
    // repeated .onnx.NodeProto node = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.node_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .onnx.TensorProto initializer = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 1, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.initializer_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string doc_string = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.doc_string_)}},
    // repeated .onnx.ValueInfoProto input = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 2, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.input_)}},
    // repeated .onnx.ValueInfoProto output = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 3, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.output_)}},
    // repeated .onnx.ValueInfoProto value_info = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 4, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.value_info_)}},
    // repeated .onnx.TensorAnnotation quantization_annotation = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 5, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.quantization_annotation_)}},
    // repeated .onnx.SparseTensorProto sparse_initializer = 15;
    {::_pbi::TcParser::FastMtR1,
     {122, 63, 6, PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.sparse_initializer_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .onnx.NodeProto node = 1;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.node_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.TensorProto initializer = 5;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.initializer_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string doc_string = 10;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.doc_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.ValueInfoProto input = 11;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.input_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.ValueInfoProto output = 12;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.output_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.ValueInfoProto value_info = 13;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.value_info_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.TensorAnnotation quantization_annotation = 14;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.quantization_annotation_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.SparseTensorProto sparse_initializer = 15;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.sparse_initializer_), 0, 6,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.StringStringEntryProto metadata_props = 16;
    {PROTOBUF_FIELD_OFFSET(GraphProto, _impl_.metadata_props_), 0, 7,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::NodeProto>()},
    {::_pbi::TcParser::GetTable<::onnx::TensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::ValueInfoProto>()},
    {::_pbi::TcParser::GetTable<::onnx::ValueInfoProto>()},
    {::_pbi::TcParser::GetTable<::onnx::ValueInfoProto>()},
    {::_pbi::TcParser::GetTable<::onnx::TensorAnnotation>()},
    {::_pbi::TcParser::GetTable<::onnx::SparseTensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
  }}, {{
    "\17\0\4\0\12\0\0\0\0\0\0\0\0\0\0\0"
    "onnx.GraphProto"
    "name"
    "doc_string"
  }},
};

::uint8_t* GraphProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.GraphProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .onnx.NodeProto node = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_node().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.GraphProto.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .onnx.TensorProto initializer = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_initializer_size()); i < n; i++) {
    const auto& repfield = this->_internal_initializer().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string doc_string = 10;
  if (!this->_internal_doc_string().empty()) {
    const std::string& _s = this->_internal_doc_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.GraphProto.doc_string");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // repeated .onnx.ValueInfoProto input = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_size()); i < n; i++) {
    const auto& repfield = this->_internal_input().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.ValueInfoProto output = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_output_size()); i < n; i++) {
    const auto& repfield = this->_internal_output().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.ValueInfoProto value_info = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_info().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.TensorAnnotation quantization_annotation = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quantization_annotation_size()); i < n; i++) {
    const auto& repfield = this->_internal_quantization_annotation().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.SparseTensorProto sparse_initializer = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sparse_initializer_size()); i < n; i++) {
    const auto& repfield = this->_internal_sparse_initializer().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata_props().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.GraphProto)
  return target;
}

::size_t GraphProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.GraphProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.NodeProto node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->_internal_node()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.TensorProto initializer = 5;
  total_size += 1UL * this->_internal_initializer_size();
  for (const auto& msg : this->_internal_initializer()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.ValueInfoProto input = 11;
  total_size += 1UL * this->_internal_input_size();
  for (const auto& msg : this->_internal_input()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.ValueInfoProto output = 12;
  total_size += 1UL * this->_internal_output_size();
  for (const auto& msg : this->_internal_output()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.ValueInfoProto value_info = 13;
  total_size += 1UL * this->_internal_value_info_size();
  for (const auto& msg : this->_internal_value_info()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.TensorAnnotation quantization_annotation = 14;
  total_size += 1UL * this->_internal_quantization_annotation_size();
  for (const auto& msg : this->_internal_quantization_annotation()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.SparseTensorProto sparse_initializer = 15;
  total_size += 1UL * this->_internal_sparse_initializer_size();
  for (const auto& msg : this->_internal_sparse_initializer()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.StringStringEntryProto metadata_props = 16;
  total_size += 2UL * this->_internal_metadata_props_size();
  for (const auto& msg : this->_internal_metadata_props()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string doc_string = 10;
  if (!this->_internal_doc_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_doc_string());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void GraphProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GraphProto*>(
      &from));
}

void GraphProto::MergeFrom(const GraphProto& from) {
  GraphProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.GraphProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_node()->MergeFrom(
      from._internal_node());
  _this->_internal_mutable_initializer()->MergeFrom(
      from._internal_initializer());
  _this->_internal_mutable_input()->MergeFrom(
      from._internal_input());
  _this->_internal_mutable_output()->MergeFrom(
      from._internal_output());
  _this->_internal_mutable_value_info()->MergeFrom(
      from._internal_value_info());
  _this->_internal_mutable_quantization_annotation()->MergeFrom(
      from._internal_quantization_annotation());
  _this->_internal_mutable_sparse_initializer()->MergeFrom(
      from._internal_sparse_initializer());
  _this->_internal_mutable_metadata_props()->MergeFrom(
      from._internal_metadata_props());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_doc_string().empty()) {
    _this->_internal_set_doc_string(from._internal_doc_string());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GraphProto::CopyFrom(const GraphProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.GraphProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GraphProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GraphProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GraphProto::InternalSwap(GraphProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  _impl_.initializer_.InternalSwap(&other->_impl_.initializer_);
  _impl_.input_.InternalSwap(&other->_impl_.input_);
  _impl_.output_.InternalSwap(&other->_impl_.output_);
  _impl_.value_info_.InternalSwap(&other->_impl_.value_info_);
  _impl_.quantization_annotation_.InternalSwap(&other->_impl_.quantization_annotation_);
  _impl_.sparse_initializer_.InternalSwap(&other->_impl_.sparse_initializer_);
  _impl_.metadata_props_.InternalSwap(&other->_impl_.metadata_props_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.doc_string_, &other->_impl_.doc_string_, arena);
}

std::string GraphProto::GetTypeName() const {
  return "onnx.GraphProto";
}

// ===================================================================

class TensorProto_Segment::_Internal {
 public:
};

TensorProto_Segment::TensorProto_Segment(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorProto.Segment)
}
TensorProto_Segment::TensorProto_Segment(
    ::google::protobuf::Arena* arena, const TensorProto_Segment& from)
    : TensorProto_Segment(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TensorProto_Segment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TensorProto_Segment::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, begin_),
           0,
           offsetof(Impl_, end_) -
               offsetof(Impl_, begin_) +
               sizeof(Impl_::end_));
}
TensorProto_Segment::~TensorProto_Segment() {
  // @@protoc_insertion_point(destructor:onnx.TensorProto.Segment)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TensorProto_Segment::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TensorProto_Segment::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorProto.Segment)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.begin_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.end_) -
      reinterpret_cast<char*>(&_impl_.begin_)) + sizeof(_impl_.end_));
  _internal_metadata_.Clear<std::string>();
}

const char* TensorProto_Segment::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> TensorProto_Segment::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TensorProto_Segment_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // int64 end = 2;
    {::_pbi::TcParser::FastV64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto_Segment, _impl_.end_)}},
    // int64 begin = 1;
    {::_pbi::TcParser::FastV64S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto_Segment, _impl_.begin_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 begin = 1;
    {PROTOBUF_FIELD_OFFSET(TensorProto_Segment, _impl_.begin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 end = 2;
    {PROTOBUF_FIELD_OFFSET(TensorProto_Segment, _impl_.end_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* TensorProto_Segment::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorProto.Segment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int64 begin = 1;
  if (this->_internal_begin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<1>(
            stream, this->_internal_begin(), target);
  }

  // int64 end = 2;
  if (this->_internal_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorProto.Segment)
  return target;
}

::size_t TensorProto_Segment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorProto.Segment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 begin = 1;
  if (this->_internal_begin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_begin());
  }

  // int64 end = 2;
  if (this->_internal_end() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TensorProto_Segment::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TensorProto_Segment*>(
      &from));
}

void TensorProto_Segment::MergeFrom(const TensorProto_Segment& from) {
  TensorProto_Segment* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorProto.Segment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_begin() != 0) {
    _this->_internal_set_begin(from._internal_begin());
  }
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TensorProto_Segment::CopyFrom(const TensorProto_Segment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorProto.Segment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TensorProto_Segment::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TensorProto_Segment::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TensorProto_Segment::InternalSwap(TensorProto_Segment* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorProto_Segment, _impl_.end_)
      + sizeof(TensorProto_Segment::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(TensorProto_Segment, _impl_.begin_)>(
          reinterpret_cast<char*>(&_impl_.begin_),
          reinterpret_cast<char*>(&other->_impl_.begin_));
}

std::string TensorProto_Segment::GetTypeName() const {
  return "onnx.TensorProto.Segment";
}

// ===================================================================

class TensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<TensorProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TensorProto, _impl_._has_bits_);
  static const ::onnx::TensorProto_Segment& segment(const TensorProto* msg);
  static void set_has_segment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TensorProto_Segment& TensorProto::_Internal::segment(const TensorProto* msg) {
  return *msg->_impl_.segment_;
}
TensorProto::TensorProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorProto)
}
inline PROTOBUF_NDEBUG_INLINE TensorProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        dims_{visibility, arena, from.dims_},
        _dims_cached_byte_size_{0},
        float_data_{visibility, arena, from.float_data_},
        int32_data_{visibility, arena, from.int32_data_},
        _int32_data_cached_byte_size_{0},
        string_data_{visibility, arena, from.string_data_},
        int64_data_{visibility, arena, from.int64_data_},
        _int64_data_cached_byte_size_{0},
        double_data_{visibility, arena, from.double_data_},
        uint64_data_{visibility, arena, from.uint64_data_},
        _uint64_data_cached_byte_size_{0},
        external_data_{visibility, arena, from.external_data_},
        metadata_props_{visibility, arena, from.metadata_props_},
        name_(arena, from.name_),
        raw_data_(arena, from.raw_data_),
        doc_string_(arena, from.doc_string_) {}

TensorProto::TensorProto(
    ::google::protobuf::Arena* arena,
    const TensorProto& from)
    : ::google::protobuf::MessageLite(arena) {
  TensorProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.segment_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::TensorProto_Segment>(arena, *from._impl_.segment_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, data_type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, data_type_),
           offsetof(Impl_, data_location_) -
               offsetof(Impl_, data_type_) +
               sizeof(Impl_::data_location_));

  // @@protoc_insertion_point(copy_constructor:onnx.TensorProto)
}
inline PROTOBUF_NDEBUG_INLINE TensorProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        dims_{visibility, arena},
        _dims_cached_byte_size_{0},
        float_data_{visibility, arena},
        int32_data_{visibility, arena},
        _int32_data_cached_byte_size_{0},
        string_data_{visibility, arena},
        int64_data_{visibility, arena},
        _int64_data_cached_byte_size_{0},
        double_data_{visibility, arena},
        uint64_data_{visibility, arena},
        _uint64_data_cached_byte_size_{0},
        external_data_{visibility, arena},
        metadata_props_{visibility, arena},
        name_(arena),
        raw_data_(arena),
        doc_string_(arena) {}

inline void TensorProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, segment_),
           0,
           offsetof(Impl_, data_location_) -
               offsetof(Impl_, segment_) +
               sizeof(Impl_::data_location_));
}
TensorProto::~TensorProto() {
  // @@protoc_insertion_point(destructor:onnx.TensorProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TensorProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.raw_data_.Destroy();
  _impl_.doc_string_.Destroy();
  delete _impl_.segment_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dims_.Clear();
  _impl_.float_data_.Clear();
  _impl_.int32_data_.Clear();
  _impl_.string_data_.Clear();
  _impl_.int64_data_.Clear();
  _impl_.double_data_.Clear();
  _impl_.uint64_data_.Clear();
  _impl_.external_data_.Clear();
  _impl_.metadata_props_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.raw_data_.ClearToEmpty();
  _impl_.doc_string_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.segment_ != nullptr);
    _impl_.segment_->Clear();
  }
  ::memset(&_impl_.data_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.data_location_) -
      reinterpret_cast<char*>(&_impl_.data_type_)) + sizeof(_impl_.data_location_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TensorProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 3, 47, 2> TensorProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TensorProto, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294918144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TensorProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .onnx.StringStringEntryProto metadata_props = 16;
    {::_pbi::TcParser::FastMtR2,
     {386, 63, 2, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.metadata_props_)}},
    // repeated int64 dims = 1;
    {::_pbi::TcParser::FastV64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.dims_)}},
    // int32 data_type = 2;
    {::_pbi::TcParser::FastV32S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.data_type_)}},
    // .onnx.TensorProto.Segment segment = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.segment_)}},
    // repeated float float_data = 4 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.float_data_)}},
    // repeated int32 int32_data = 5 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.int32_data_)}},
    // repeated bytes string_data = 6;
    {::_pbi::TcParser::FastBR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.string_data_)}},
    // repeated int64 int64_data = 7 [packed = true];
    {::_pbi::TcParser::FastV64P1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.int64_data_)}},
    // string name = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.name_)}},
    // bytes raw_data = 9;
    {::_pbi::TcParser::FastBS1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.raw_data_)}},
    // repeated double double_data = 10 [packed = true];
    {::_pbi::TcParser::FastF64P1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.double_data_)}},
    // repeated uint64 uint64_data = 11 [packed = true];
    {::_pbi::TcParser::FastV64P1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.uint64_data_)}},
    // string doc_string = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.doc_string_)}},
    // repeated .onnx.StringStringEntryProto external_data = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 1, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.external_data_)}},
    // .onnx.TensorProto.DataLocation data_location = 14;
    {::_pbi::TcParser::FastV32S1,
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.data_location_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int64 dims = 1;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.dims_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // int32 data_type = 2;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.data_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .onnx.TensorProto.Segment segment = 3;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.segment_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated float float_data = 4 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.float_data_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFloat)},
    // repeated int32 int32_data = 5 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.int32_data_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated bytes string_data = 6;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.string_data_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kBytes | ::_fl::kRepSString)},
    // repeated int64 int64_data = 7 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.int64_data_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
    // string name = 8;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bytes raw_data = 9;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.raw_data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
    // repeated double double_data = 10 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.double_data_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedDouble)},
    // repeated uint64 uint64_data = 11 [packed = true];
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.uint64_data_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
    // string doc_string = 12;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.doc_string_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.StringStringEntryProto external_data = 13;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.external_data_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .onnx.TensorProto.DataLocation data_location = 14;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.data_location_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // repeated .onnx.StringStringEntryProto metadata_props = 16;
    {PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.metadata_props_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TensorProto_Segment>()},
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
  }}, {{
    "\20\0\0\0\0\0\0\0\4\0\0\0\12\0\0\0"
    "onnx.TensorProto"
    "name"
    "doc_string"
  }},
};

::uint8_t* TensorProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated int64 dims = 1;
  {
    int byte_size = _impl_._dims_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dims(), byte_size, target);
    }
  }

  // int32 data_type = 2;
  if (this->_internal_data_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_data_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.TensorProto.Segment segment = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, _Internal::segment(this),
        _Internal::segment(this).GetCachedSize(), target, stream);
  }

  // repeated float float_data = 4 [packed = true];
  if (this->_internal_float_data_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_float_data(), target);
  }

  // repeated int32 int32_data = 5 [packed = true];
  {
    int byte_size = _impl_._int32_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_int32_data(), byte_size, target);
    }
  }

  // repeated bytes string_data = 6;
  for (int i = 0, n = this->_internal_string_data_size(); i < n; ++i) {
    const auto& s = this->_internal_string_data().Get(i);
    target = stream->WriteBytes(6, s, target);
  }

  // repeated int64 int64_data = 7 [packed = true];
  {
    int byte_size = _impl_._int64_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_int64_data(), byte_size, target);
    }
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.TensorProto.name");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // bytes raw_data = 9;
  if (!this->_internal_raw_data().empty()) {
    const std::string& _s = this->_internal_raw_data();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  // repeated double double_data = 10 [packed = true];
  if (this->_internal_double_data_size() > 0) {
    target = stream->WriteFixedPacked(10, _internal_double_data(), target);
  }

  // repeated uint64 uint64_data = 11 [packed = true];
  {
    int byte_size = _impl_._uint64_data_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          11, _internal_uint64_data(), byte_size, target);
    }
  }

  // string doc_string = 12;
  if (!this->_internal_doc_string().empty()) {
    const std::string& _s = this->_internal_doc_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.TensorProto.doc_string");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // repeated .onnx.StringStringEntryProto external_data = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_external_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_external_data().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .onnx.TensorProto.DataLocation data_location = 14;
  if (this->_internal_data_location() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        14, this->_internal_data_location(), target);
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 16;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata_props().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(16, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorProto)
  return target;
}

::size_t TensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_dims())
    ;
    _impl_._dims_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated float float_data = 4 [packed = true];
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_float_data_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated int32 int32_data = 5 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(
        this->_internal_int32_data())
    ;
    _impl_._int32_data_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated bytes string_data = 6;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_string_data().size());
  for (int i = 0, n = _internal_string_data().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
        _internal_string_data().Get(i));
  }
  // repeated int64 int64_data = 7 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_int64_data())
    ;
    _impl_._int64_data_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated double double_data = 10 [packed = true];
  {
    std::size_t data_size = std::size_t{8} *
        ::_pbi::FromIntSize(this->_internal_double_data_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated uint64 uint64_data = 11 [packed = true];
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt64Size(
        this->_internal_uint64_data())
    ;
    _impl_._uint64_data_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  // repeated .onnx.StringStringEntryProto external_data = 13;
  total_size += 1UL * this->_internal_external_data_size();
  for (const auto& msg : this->_internal_external_data()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.StringStringEntryProto metadata_props = 16;
  total_size += 2UL * this->_internal_metadata_props_size();
  for (const auto& msg : this->_internal_metadata_props()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // bytes raw_data = 9;
  if (!this->_internal_raw_data().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_raw_data());
  }

  // string doc_string = 12;
  if (!this->_internal_doc_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_doc_string());
  }

  // .onnx.TensorProto.Segment segment = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.segment_);
  }

  // int32 data_type = 2;
  if (this->_internal_data_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_data_type());
  }

  // .onnx.TensorProto.DataLocation data_location = 14;
  if (this->_internal_data_location() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_data_location());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TensorProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TensorProto*>(
      &from));
}

void TensorProto::MergeFrom(const TensorProto& from) {
  TensorProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dims()->MergeFrom(from._internal_dims());
  _this->_internal_mutable_float_data()->MergeFrom(from._internal_float_data());
  _this->_internal_mutable_int32_data()->MergeFrom(from._internal_int32_data());
  _this->_internal_mutable_string_data()->MergeFrom(from._internal_string_data());
  _this->_internal_mutable_int64_data()->MergeFrom(from._internal_int64_data());
  _this->_internal_mutable_double_data()->MergeFrom(from._internal_double_data());
  _this->_internal_mutable_uint64_data()->MergeFrom(from._internal_uint64_data());
  _this->_internal_mutable_external_data()->MergeFrom(
      from._internal_external_data());
  _this->_internal_mutable_metadata_props()->MergeFrom(
      from._internal_metadata_props());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_raw_data().empty()) {
    _this->_internal_set_raw_data(from._internal_raw_data());
  }
  if (!from._internal_doc_string().empty()) {
    _this->_internal_set_doc_string(from._internal_doc_string());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_segment()->::onnx::TensorProto_Segment::MergeFrom(
        from._internal_segment());
  }
  if (from._internal_data_type() != 0) {
    _this->_internal_set_data_type(from._internal_data_type());
  }
  if (from._internal_data_location() != 0) {
    _this->_internal_set_data_location(from._internal_data_location());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TensorProto::CopyFrom(const TensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TensorProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TensorProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TensorProto::InternalSwap(TensorProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dims_.InternalSwap(&other->_impl_.dims_);
  _impl_.float_data_.InternalSwap(&other->_impl_.float_data_);
  _impl_.int32_data_.InternalSwap(&other->_impl_.int32_data_);
  _impl_.string_data_.InternalSwap(&other->_impl_.string_data_);
  _impl_.int64_data_.InternalSwap(&other->_impl_.int64_data_);
  _impl_.double_data_.InternalSwap(&other->_impl_.double_data_);
  _impl_.uint64_data_.InternalSwap(&other->_impl_.uint64_data_);
  _impl_.external_data_.InternalSwap(&other->_impl_.external_data_);
  _impl_.metadata_props_.InternalSwap(&other->_impl_.metadata_props_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.raw_data_, &other->_impl_.raw_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.doc_string_, &other->_impl_.doc_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.data_location_)
      + sizeof(TensorProto::_impl_.data_location_)
      - PROTOBUF_FIELD_OFFSET(TensorProto, _impl_.segment_)>(
          reinterpret_cast<char*>(&_impl_.segment_),
          reinterpret_cast<char*>(&other->_impl_.segment_));
}

std::string TensorProto::GetTypeName() const {
  return "onnx.TensorProto";
}

// ===================================================================

class SparseTensorProto::_Internal {
 public:
  using HasBits = decltype(std::declval<SparseTensorProto>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_._has_bits_);
  static const ::onnx::TensorProto& values(const SparseTensorProto* msg);
  static void set_has_values(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::onnx::TensorProto& indices(const SparseTensorProto* msg);
  static void set_has_indices(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::onnx::TensorProto& SparseTensorProto::_Internal::values(const SparseTensorProto* msg) {
  return *msg->_impl_.values_;
}
const ::onnx::TensorProto& SparseTensorProto::_Internal::indices(const SparseTensorProto* msg) {
  return *msg->_impl_.indices_;
}
SparseTensorProto::SparseTensorProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.SparseTensorProto)
}
inline PROTOBUF_NDEBUG_INLINE SparseTensorProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        dims_{visibility, arena, from.dims_},
        _dims_cached_byte_size_{0} {}

SparseTensorProto::SparseTensorProto(
    ::google::protobuf::Arena* arena,
    const SparseTensorProto& from)
    : ::google::protobuf::MessageLite(arena) {
  SparseTensorProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.values_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::TensorProto>(arena, *from._impl_.values_)
                : nullptr;
  _impl_.indices_ = (cached_has_bits & 0x00000002u)
                ? CreateMaybeMessage<::onnx::TensorProto>(arena, *from._impl_.indices_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:onnx.SparseTensorProto)
}
inline PROTOBUF_NDEBUG_INLINE SparseTensorProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        dims_{visibility, arena},
        _dims_cached_byte_size_{0} {}

inline void SparseTensorProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, values_),
           0,
           offsetof(Impl_, indices_) -
               offsetof(Impl_, values_) +
               sizeof(Impl_::indices_));
}
SparseTensorProto::~SparseTensorProto() {
  // @@protoc_insertion_point(destructor:onnx.SparseTensorProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void SparseTensorProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.values_;
  delete _impl_.indices_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void SparseTensorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.SparseTensorProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dims_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.values_ != nullptr);
      _impl_.values_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.indices_ != nullptr);
      _impl_.indices_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SparseTensorProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> SparseTensorProto::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_SparseTensorProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .onnx.TensorProto values = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.values_)}},
    // .onnx.TensorProto indices = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.indices_)}},
    // repeated int64 dims = 3;
    {::_pbi::TcParser::FastV64P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.dims_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .onnx.TensorProto values = 1;
    {PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.values_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .onnx.TensorProto indices = 2;
    {PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.indices_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated int64 dims = 3;
    {PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.dims_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TensorProto>()},
    {::_pbi::TcParser::GetTable<::onnx::TensorProto>()},
  }}, {{
  }},
};

::uint8_t* SparseTensorProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.SparseTensorProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.TensorProto values = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::values(this),
        _Internal::values(this).GetCachedSize(), target, stream);
  }

  // .onnx.TensorProto indices = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::indices(this),
        _Internal::indices(this).GetCachedSize(), target, stream);
  }

  // repeated int64 dims = 3;
  {
    int byte_size = _impl_._dims_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_dims(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.SparseTensorProto)
  return target;
}

::size_t SparseTensorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.SparseTensorProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 3;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(
        this->_internal_dims())
    ;
    _impl_._dims_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .onnx.TensorProto values = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.values_);
    }

    // .onnx.TensorProto indices = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.indices_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void SparseTensorProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SparseTensorProto*>(
      &from));
}

void SparseTensorProto::MergeFrom(const SparseTensorProto& from) {
  SparseTensorProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.SparseTensorProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dims()->MergeFrom(from._internal_dims());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_values()->::onnx::TensorProto::MergeFrom(
          from._internal_values());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_indices()->::onnx::TensorProto::MergeFrom(
          from._internal_indices());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SparseTensorProto::CopyFrom(const SparseTensorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.SparseTensorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SparseTensorProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* SparseTensorProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void SparseTensorProto::InternalSwap(SparseTensorProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.dims_.InternalSwap(&other->_impl_.dims_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.indices_)
      + sizeof(SparseTensorProto::_impl_.indices_)
      - PROTOBUF_FIELD_OFFSET(SparseTensorProto, _impl_.values_)>(
          reinterpret_cast<char*>(&_impl_.values_),
          reinterpret_cast<char*>(&other->_impl_.values_));
}

std::string SparseTensorProto::GetTypeName() const {
  return "onnx.SparseTensorProto";
}

// ===================================================================

class TensorShapeProto_Dimension::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::onnx::TensorShapeProto_Dimension, _impl_._oneof_case_);
};

TensorShapeProto_Dimension::TensorShapeProto_Dimension(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorShapeProto.Dimension)
}
inline PROTOBUF_NDEBUG_INLINE TensorShapeProto_Dimension::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : denotation_(arena, from.denotation_),
        value_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

TensorShapeProto_Dimension::TensorShapeProto_Dimension(
    ::google::protobuf::Arena* arena,
    const TensorShapeProto_Dimension& from)
    : ::google::protobuf::MessageLite(arena) {
  TensorShapeProto_Dimension* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kDimValue:
        _impl_.value_.dim_value_ = from._impl_.value_.dim_value_;
        break;
      case kDimParam:
        new (&_impl_.value_.dim_param_) decltype(_impl_.value_.dim_param_){arena, from._impl_.value_.dim_param_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:onnx.TensorShapeProto.Dimension)
}
inline PROTOBUF_NDEBUG_INLINE TensorShapeProto_Dimension::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : denotation_(arena),
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void TensorShapeProto_Dimension::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TensorShapeProto_Dimension::~TensorShapeProto_Dimension() {
  // @@protoc_insertion_point(destructor:onnx.TensorShapeProto.Dimension)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TensorShapeProto_Dimension::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.denotation_.Destroy();
  if (has_value()) {
    clear_value();
  }
  _impl_.~Impl_();
}

void TensorShapeProto_Dimension::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:onnx.TensorShapeProto.Dimension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kDimValue: {
      // No need to clear
      break;
    }
    case kDimParam: {
      _impl_.value_.dim_param_.Destroy();
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void TensorShapeProto_Dimension::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorShapeProto.Dimension)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denotation_.ClearToEmpty();
  clear_value();
  _internal_metadata_.Clear<std::string>();
}

const char* TensorShapeProto_Dimension::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 3, 0, 59, 2> TensorShapeProto_Dimension::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_TensorShapeProto_Dimension_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // string denotation = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TensorShapeProto_Dimension, _impl_.denotation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 dim_value = 1;
    {PROTOBUF_FIELD_OFFSET(TensorShapeProto_Dimension, _impl_.value_.dim_value_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kInt64)},
    // string dim_param = 2;
    {PROTOBUF_FIELD_OFFSET(TensorShapeProto_Dimension, _impl_.value_.dim_param_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string denotation = 3;
    {PROTOBUF_FIELD_OFFSET(TensorShapeProto_Dimension, _impl_.denotation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\37\0\11\12\0\0\0\0"
    "onnx.TensorShapeProto.Dimension"
    "dim_param"
    "denotation"
  }},
};

::uint8_t* TensorShapeProto_Dimension::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorShapeProto.Dimension)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kDimValue: {
      target = ::google::protobuf::internal::WireFormatLite::
          WriteInt64ToArrayWithField<1>(
              stream, this->_internal_dim_value(), target);
      break;
    }
    case kDimParam: {
      const std::string& _s = this->_internal_dim_param();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.TensorShapeProto.Dimension.dim_param");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    default:
      break;
  }
  // string denotation = 3;
  if (!this->_internal_denotation().empty()) {
    const std::string& _s = this->_internal_denotation();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.TensorShapeProto.Dimension.denotation");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorShapeProto.Dimension)
  return target;
}

::size_t TensorShapeProto_Dimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorShapeProto.Dimension)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denotation = 3;
  if (!this->_internal_denotation().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_denotation());
  }

  switch (value_case()) {
    // int64 dim_value = 1;
    case kDimValue: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_dim_value());
      break;
    }
    // string dim_param = 2;
    case kDimParam: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_dim_param());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TensorShapeProto_Dimension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TensorShapeProto_Dimension*>(
      &from));
}

void TensorShapeProto_Dimension::MergeFrom(const TensorShapeProto_Dimension& from) {
  TensorShapeProto_Dimension* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorShapeProto.Dimension)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denotation().empty()) {
    _this->_internal_set_denotation(from._internal_denotation());
  }
  switch (from.value_case()) {
    case kDimValue: {
      _this->_internal_set_dim_value(from._internal_dim_value());
      break;
    }
    case kDimParam: {
      _this->_internal_set_dim_param(from._internal_dim_param());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TensorShapeProto_Dimension::CopyFrom(const TensorShapeProto_Dimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorShapeProto.Dimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TensorShapeProto_Dimension::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TensorShapeProto_Dimension::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TensorShapeProto_Dimension::InternalSwap(TensorShapeProto_Dimension* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denotation_, &other->_impl_.denotation_, arena);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string TensorShapeProto_Dimension::GetTypeName() const {
  return "onnx.TensorShapeProto.Dimension";
}

// ===================================================================

class TensorShapeProto::_Internal {
 public:
};

TensorShapeProto::TensorShapeProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TensorShapeProto)
}
inline PROTOBUF_NDEBUG_INLINE TensorShapeProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : dim_{visibility, arena, from.dim_},
        _cached_size_{0} {}

TensorShapeProto::TensorShapeProto(
    ::google::protobuf::Arena* arena,
    const TensorShapeProto& from)
    : ::google::protobuf::MessageLite(arena) {
  TensorShapeProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:onnx.TensorShapeProto)
}
inline PROTOBUF_NDEBUG_INLINE TensorShapeProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : dim_{visibility, arena},
        _cached_size_{0} {}

inline void TensorShapeProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TensorShapeProto::~TensorShapeProto() {
  // @@protoc_insertion_point(destructor:onnx.TensorShapeProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TensorShapeProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TensorShapeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TensorShapeProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dim_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TensorShapeProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TensorShapeProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TensorShapeProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // repeated .onnx.TensorShapeProto.Dimension dim = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TensorShapeProto, _impl_.dim_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .onnx.TensorShapeProto.Dimension dim = 1;
    {PROTOBUF_FIELD_OFFSET(TensorShapeProto, _impl_.dim_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TensorShapeProto_Dimension>()},
  }}, {{
  }},
};

::uint8_t* TensorShapeProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TensorShapeProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .onnx.TensorShapeProto.Dimension dim = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dim_size()); i < n; i++) {
    const auto& repfield = this->_internal_dim().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TensorShapeProto)
  return target;
}

::size_t TensorShapeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TensorShapeProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onnx.TensorShapeProto.Dimension dim = 1;
  total_size += 1UL * this->_internal_dim_size();
  for (const auto& msg : this->_internal_dim()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TensorShapeProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TensorShapeProto*>(
      &from));
}

void TensorShapeProto::MergeFrom(const TensorShapeProto& from) {
  TensorShapeProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TensorShapeProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dim()->MergeFrom(
      from._internal_dim());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TensorShapeProto::CopyFrom(const TensorShapeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TensorShapeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TensorShapeProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TensorShapeProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TensorShapeProto::InternalSwap(TensorShapeProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dim_.InternalSwap(&other->_impl_.dim_);
}

std::string TensorShapeProto::GetTypeName() const {
  return "onnx.TensorShapeProto";
}

// ===================================================================

class TypeProto_Tensor::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_Tensor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_._has_bits_);
  static const ::onnx::TensorShapeProto& shape(const TypeProto_Tensor* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TensorShapeProto& TypeProto_Tensor::_Internal::shape(const TypeProto_Tensor* msg) {
  return *msg->_impl_.shape_;
}
TypeProto_Tensor::TypeProto_Tensor(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.Tensor)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_Tensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TypeProto_Tensor::TypeProto_Tensor(
    ::google::protobuf::Arena* arena,
    const TypeProto_Tensor& from)
    : ::google::protobuf::MessageLite(arena) {
  TypeProto_Tensor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.shape_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::TensorShapeProto>(arena, *from._impl_.shape_)
                : nullptr;
  _impl_.elem_type_ = from._impl_.elem_type_;

  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Tensor)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_Tensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TypeProto_Tensor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, shape_),
           0,
           offsetof(Impl_, elem_type_) -
               offsetof(Impl_, shape_) +
               sizeof(Impl_::elem_type_));
}
TypeProto_Tensor::~TypeProto_Tensor() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Tensor)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TypeProto_Tensor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.shape_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TypeProto_Tensor::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Tensor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.shape_ != nullptr);
    _impl_.shape_->Clear();
  }
  _impl_.elem_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TypeProto_Tensor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TypeProto_Tensor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TypeProto_Tensor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .onnx.TensorShapeProto shape = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_.shape_)}},
    // int32 elem_type = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_.elem_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 elem_type = 1;
    {PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_.elem_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .onnx.TensorShapeProto shape = 2;
    {PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_.shape_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TensorShapeProto>()},
  }}, {{
  }},
};

::uint8_t* TypeProto_Tensor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.Tensor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 elem_type = 1;
  if (this->_internal_elem_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_elem_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.TensorShapeProto shape = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.Tensor)
  return target;
}

::size_t TypeProto_Tensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Tensor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onnx.TensorShapeProto shape = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.shape_);
  }

  // int32 elem_type = 1;
  if (this->_internal_elem_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_elem_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TypeProto_Tensor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TypeProto_Tensor*>(
      &from));
}

void TypeProto_Tensor::MergeFrom(const TypeProto_Tensor& from) {
  TypeProto_Tensor* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Tensor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_shape()->::onnx::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_elem_type() != 0) {
    _this->_internal_set_elem_type(from._internal_elem_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TypeProto_Tensor::CopyFrom(const TypeProto_Tensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Tensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TypeProto_Tensor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TypeProto_Tensor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TypeProto_Tensor::InternalSwap(TypeProto_Tensor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_.elem_type_)
      + sizeof(TypeProto_Tensor::_impl_.elem_type_)
      - PROTOBUF_FIELD_OFFSET(TypeProto_Tensor, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

std::string TypeProto_Tensor::GetTypeName() const {
  return "onnx.TypeProto.Tensor";
}

// ===================================================================

class TypeProto_Sequence::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_Sequence>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_Sequence, _impl_._has_bits_);
  static const ::onnx::TypeProto& elem_type(const TypeProto_Sequence* msg);
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TypeProto& TypeProto_Sequence::_Internal::elem_type(const TypeProto_Sequence* msg) {
  return *msg->_impl_.elem_type_;
}
TypeProto_Sequence::TypeProto_Sequence(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.Sequence)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_Sequence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TypeProto_Sequence::TypeProto_Sequence(
    ::google::protobuf::Arena* arena,
    const TypeProto_Sequence& from)
    : ::google::protobuf::MessageLite(arena) {
  TypeProto_Sequence* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.elem_type_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::TypeProto>(arena, *from._impl_.elem_type_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Sequence)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_Sequence::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TypeProto_Sequence::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.elem_type_ = {};
}
TypeProto_Sequence::~TypeProto_Sequence() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Sequence)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TypeProto_Sequence::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.elem_type_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TypeProto_Sequence::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Sequence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.elem_type_ != nullptr);
    _impl_.elem_type_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TypeProto_Sequence::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TypeProto_Sequence::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TypeProto_Sequence, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TypeProto_Sequence_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .onnx.TypeProto elem_type = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TypeProto_Sequence, _impl_.elem_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .onnx.TypeProto elem_type = 1;
    {PROTOBUF_FIELD_OFFSET(TypeProto_Sequence, _impl_.elem_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TypeProto>()},
  }}, {{
  }},
};

::uint8_t* TypeProto_Sequence::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.Sequence)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.TypeProto elem_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::elem_type(this),
        _Internal::elem_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.Sequence)
  return target;
}

::size_t TypeProto_Sequence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Sequence)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onnx.TypeProto elem_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.elem_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TypeProto_Sequence::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TypeProto_Sequence*>(
      &from));
}

void TypeProto_Sequence::MergeFrom(const TypeProto_Sequence& from) {
  TypeProto_Sequence* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Sequence)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_elem_type()->::onnx::TypeProto::MergeFrom(
        from._internal_elem_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TypeProto_Sequence::CopyFrom(const TypeProto_Sequence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Sequence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TypeProto_Sequence::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TypeProto_Sequence::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TypeProto_Sequence::InternalSwap(TypeProto_Sequence* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.elem_type_, other->_impl_.elem_type_);
}

std::string TypeProto_Sequence::GetTypeName() const {
  return "onnx.TypeProto.Sequence";
}

// ===================================================================

class TypeProto_Map::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_Map>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_._has_bits_);
  static const ::onnx::TypeProto& value_type(const TypeProto_Map* msg);
  static void set_has_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TypeProto& TypeProto_Map::_Internal::value_type(const TypeProto_Map* msg) {
  return *msg->_impl_.value_type_;
}
TypeProto_Map::TypeProto_Map(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.Map)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_Map::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TypeProto_Map::TypeProto_Map(
    ::google::protobuf::Arena* arena,
    const TypeProto_Map& from)
    : ::google::protobuf::MessageLite(arena) {
  TypeProto_Map* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.value_type_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::TypeProto>(arena, *from._impl_.value_type_)
                : nullptr;
  _impl_.key_type_ = from._impl_.key_type_;

  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Map)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_Map::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TypeProto_Map::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, value_type_),
           0,
           offsetof(Impl_, key_type_) -
               offsetof(Impl_, value_type_) +
               sizeof(Impl_::key_type_));
}
TypeProto_Map::~TypeProto_Map() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Map)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TypeProto_Map::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.value_type_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TypeProto_Map::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Map)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.value_type_ != nullptr);
    _impl_.value_type_->Clear();
  }
  _impl_.key_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TypeProto_Map::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TypeProto_Map::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TypeProto_Map_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .onnx.TypeProto value_type = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_.value_type_)}},
    // int32 key_type = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_.key_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 key_type = 1;
    {PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_.key_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .onnx.TypeProto value_type = 2;
    {PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_.value_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TypeProto>()},
  }}, {{
  }},
};

::uint8_t* TypeProto_Map::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.Map)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 key_type = 1;
  if (this->_internal_key_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_key_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.TypeProto value_type = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::value_type(this),
        _Internal::value_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.Map)
  return target;
}

::size_t TypeProto_Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Map)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onnx.TypeProto value_type = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_type_);
  }

  // int32 key_type = 1;
  if (this->_internal_key_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_key_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TypeProto_Map::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TypeProto_Map*>(
      &from));
}

void TypeProto_Map::MergeFrom(const TypeProto_Map& from) {
  TypeProto_Map* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Map)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_value_type()->::onnx::TypeProto::MergeFrom(
        from._internal_value_type());
  }
  if (from._internal_key_type() != 0) {
    _this->_internal_set_key_type(from._internal_key_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TypeProto_Map::CopyFrom(const TypeProto_Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TypeProto_Map::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TypeProto_Map::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TypeProto_Map::InternalSwap(TypeProto_Map* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_.key_type_)
      + sizeof(TypeProto_Map::_impl_.key_type_)
      - PROTOBUF_FIELD_OFFSET(TypeProto_Map, _impl_.value_type_)>(
          reinterpret_cast<char*>(&_impl_.value_type_),
          reinterpret_cast<char*>(&other->_impl_.value_type_));
}

std::string TypeProto_Map::GetTypeName() const {
  return "onnx.TypeProto.Map";
}

// ===================================================================

class TypeProto_Optional::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_Optional>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_Optional, _impl_._has_bits_);
  static const ::onnx::TypeProto& elem_type(const TypeProto_Optional* msg);
  static void set_has_elem_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TypeProto& TypeProto_Optional::_Internal::elem_type(const TypeProto_Optional* msg) {
  return *msg->_impl_.elem_type_;
}
TypeProto_Optional::TypeProto_Optional(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.Optional)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_Optional::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TypeProto_Optional::TypeProto_Optional(
    ::google::protobuf::Arena* arena,
    const TypeProto_Optional& from)
    : ::google::protobuf::MessageLite(arena) {
  TypeProto_Optional* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.elem_type_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::TypeProto>(arena, *from._impl_.elem_type_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.Optional)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_Optional::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TypeProto_Optional::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.elem_type_ = {};
}
TypeProto_Optional::~TypeProto_Optional() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.Optional)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TypeProto_Optional::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.elem_type_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TypeProto_Optional::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.Optional)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.elem_type_ != nullptr);
    _impl_.elem_type_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TypeProto_Optional::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TypeProto_Optional::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TypeProto_Optional, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TypeProto_Optional_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .onnx.TypeProto elem_type = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TypeProto_Optional, _impl_.elem_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .onnx.TypeProto elem_type = 1;
    {PROTOBUF_FIELD_OFFSET(TypeProto_Optional, _impl_.elem_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TypeProto>()},
  }}, {{
  }},
};

::uint8_t* TypeProto_Optional::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.Optional)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.TypeProto elem_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, _Internal::elem_type(this),
        _Internal::elem_type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.Optional)
  return target;
}

::size_t TypeProto_Optional::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.Optional)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onnx.TypeProto elem_type = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.elem_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TypeProto_Optional::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TypeProto_Optional*>(
      &from));
}

void TypeProto_Optional::MergeFrom(const TypeProto_Optional& from) {
  TypeProto_Optional* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.Optional)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_elem_type()->::onnx::TypeProto::MergeFrom(
        from._internal_elem_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TypeProto_Optional::CopyFrom(const TypeProto_Optional& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.Optional)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TypeProto_Optional::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TypeProto_Optional::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TypeProto_Optional::InternalSwap(TypeProto_Optional* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.elem_type_, other->_impl_.elem_type_);
}

std::string TypeProto_Optional::GetTypeName() const {
  return "onnx.TypeProto.Optional";
}

// ===================================================================

class TypeProto_SparseTensor::_Internal {
 public:
  using HasBits = decltype(std::declval<TypeProto_SparseTensor>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_._has_bits_);
  static const ::onnx::TensorShapeProto& shape(const TypeProto_SparseTensor* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::onnx::TensorShapeProto& TypeProto_SparseTensor::_Internal::shape(const TypeProto_SparseTensor* msg) {
  return *msg->_impl_.shape_;
}
TypeProto_SparseTensor::TypeProto_SparseTensor(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto.SparseTensor)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_SparseTensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TypeProto_SparseTensor::TypeProto_SparseTensor(
    ::google::protobuf::Arena* arena,
    const TypeProto_SparseTensor& from)
    : ::google::protobuf::MessageLite(arena) {
  TypeProto_SparseTensor* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.shape_ = (cached_has_bits & 0x00000001u)
                ? CreateMaybeMessage<::onnx::TensorShapeProto>(arena, *from._impl_.shape_)
                : nullptr;
  _impl_.elem_type_ = from._impl_.elem_type_;

  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto.SparseTensor)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto_SparseTensor::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TypeProto_SparseTensor::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, shape_),
           0,
           offsetof(Impl_, elem_type_) -
               offsetof(Impl_, shape_) +
               sizeof(Impl_::elem_type_));
}
TypeProto_SparseTensor::~TypeProto_SparseTensor() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto.SparseTensor)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TypeProto_SparseTensor::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  delete _impl_.shape_;
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void TypeProto_SparseTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto.SparseTensor)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.shape_ != nullptr);
    _impl_.shape_->Clear();
  }
  _impl_.elem_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TypeProto_SparseTensor::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> TypeProto_SparseTensor::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TypeProto_SparseTensor_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // .onnx.TensorShapeProto shape = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_.shape_)}},
    // int32 elem_type = 1;
    {::_pbi::TcParser::FastV32S1,
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_.elem_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 elem_type = 1;
    {PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_.elem_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .onnx.TensorShapeProto shape = 2;
    {PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_.shape_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TensorShapeProto>()},
  }}, {{
  }},
};

::uint8_t* TypeProto_SparseTensor::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto.SparseTensor)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // int32 elem_type = 1;
  if (this->_internal_elem_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_elem_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .onnx.TensorShapeProto shape = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto.SparseTensor)
  return target;
}

::size_t TypeProto_SparseTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto.SparseTensor)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onnx.TensorShapeProto shape = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size +=
        1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.shape_);
  }

  // int32 elem_type = 1;
  if (this->_internal_elem_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_elem_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TypeProto_SparseTensor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TypeProto_SparseTensor*>(
      &from));
}

void TypeProto_SparseTensor::MergeFrom(const TypeProto_SparseTensor& from) {
  TypeProto_SparseTensor* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto.SparseTensor)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_shape()->::onnx::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_elem_type() != 0) {
    _this->_internal_set_elem_type(from._internal_elem_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TypeProto_SparseTensor::CopyFrom(const TypeProto_SparseTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto.SparseTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TypeProto_SparseTensor::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TypeProto_SparseTensor::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TypeProto_SparseTensor::InternalSwap(TypeProto_SparseTensor* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_.elem_type_)
      + sizeof(TypeProto_SparseTensor::_impl_.elem_type_)
      - PROTOBUF_FIELD_OFFSET(TypeProto_SparseTensor, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

std::string TypeProto_SparseTensor::GetTypeName() const {
  return "onnx.TypeProto.SparseTensor";
}

// ===================================================================

class TypeProto::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::onnx::TypeProto, _impl_._oneof_case_);
  static const ::onnx::TypeProto_Tensor& tensor_type(const TypeProto* msg);
  static const ::onnx::TypeProto_Sequence& sequence_type(const TypeProto* msg);
  static const ::onnx::TypeProto_Map& map_type(const TypeProto* msg);
  static const ::onnx::TypeProto_Optional& optional_type(const TypeProto* msg);
  static const ::onnx::TypeProto_SparseTensor& sparse_tensor_type(const TypeProto* msg);
};

const ::onnx::TypeProto_Tensor& TypeProto::_Internal::tensor_type(const TypeProto* msg) {
  return *msg->_impl_.value_.tensor_type_;
}
const ::onnx::TypeProto_Sequence& TypeProto::_Internal::sequence_type(const TypeProto* msg) {
  return *msg->_impl_.value_.sequence_type_;
}
const ::onnx::TypeProto_Map& TypeProto::_Internal::map_type(const TypeProto* msg) {
  return *msg->_impl_.value_.map_type_;
}
const ::onnx::TypeProto_Optional& TypeProto::_Internal::optional_type(const TypeProto* msg) {
  return *msg->_impl_.value_.optional_type_;
}
const ::onnx::TypeProto_SparseTensor& TypeProto::_Internal::sparse_tensor_type(const TypeProto* msg) {
  return *msg->_impl_.value_.sparse_tensor_type_;
}
void TypeProto::set_allocated_tensor_type(::onnx::TypeProto_Tensor* tensor_type) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (tensor_type) {
    ::google::protobuf::Arena* submessage_arena = tensor_type->GetArena();
    if (message_arena != submessage_arena) {
      tensor_type = ::google::protobuf::internal::GetOwnedMessage(message_arena, tensor_type, submessage_arena);
    }
    set_has_tensor_type();
    _impl_.value_.tensor_type_ = tensor_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.tensor_type)
}
void TypeProto::set_allocated_sequence_type(::onnx::TypeProto_Sequence* sequence_type) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (sequence_type) {
    ::google::protobuf::Arena* submessage_arena = sequence_type->GetArena();
    if (message_arena != submessage_arena) {
      sequence_type = ::google::protobuf::internal::GetOwnedMessage(message_arena, sequence_type, submessage_arena);
    }
    set_has_sequence_type();
    _impl_.value_.sequence_type_ = sequence_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.sequence_type)
}
void TypeProto::set_allocated_map_type(::onnx::TypeProto_Map* map_type) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (map_type) {
    ::google::protobuf::Arena* submessage_arena = map_type->GetArena();
    if (message_arena != submessage_arena) {
      map_type = ::google::protobuf::internal::GetOwnedMessage(message_arena, map_type, submessage_arena);
    }
    set_has_map_type();
    _impl_.value_.map_type_ = map_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.map_type)
}
void TypeProto::set_allocated_optional_type(::onnx::TypeProto_Optional* optional_type) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (optional_type) {
    ::google::protobuf::Arena* submessage_arena = optional_type->GetArena();
    if (message_arena != submessage_arena) {
      optional_type = ::google::protobuf::internal::GetOwnedMessage(message_arena, optional_type, submessage_arena);
    }
    set_has_optional_type();
    _impl_.value_.optional_type_ = optional_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.optional_type)
}
void TypeProto::set_allocated_sparse_tensor_type(::onnx::TypeProto_SparseTensor* sparse_tensor_type) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_value();
  if (sparse_tensor_type) {
    ::google::protobuf::Arena* submessage_arena = sparse_tensor_type->GetArena();
    if (message_arena != submessage_arena) {
      sparse_tensor_type = ::google::protobuf::internal::GetOwnedMessage(message_arena, sparse_tensor_type, submessage_arena);
    }
    set_has_sparse_tensor_type();
    _impl_.value_.sparse_tensor_type_ = sparse_tensor_type;
  }
  // @@protoc_insertion_point(field_set_allocated:onnx.TypeProto.sparse_tensor_type)
}
TypeProto::TypeProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.TypeProto)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : denotation_(arena, from.denotation_),
        value_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

TypeProto::TypeProto(
    ::google::protobuf::Arena* arena,
    const TypeProto& from)
    : ::google::protobuf::MessageLite(arena) {
  TypeProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  switch (value_case()) {
    case VALUE_NOT_SET:
      break;
      case kTensorType:
        _impl_.value_.tensor_type_ = CreateMaybeMessage<::onnx::TypeProto_Tensor>(arena, *from._impl_.value_.tensor_type_);
        break;
      case kSequenceType:
        _impl_.value_.sequence_type_ = CreateMaybeMessage<::onnx::TypeProto_Sequence>(arena, *from._impl_.value_.sequence_type_);
        break;
      case kMapType:
        _impl_.value_.map_type_ = CreateMaybeMessage<::onnx::TypeProto_Map>(arena, *from._impl_.value_.map_type_);
        break;
      case kOptionalType:
        _impl_.value_.optional_type_ = CreateMaybeMessage<::onnx::TypeProto_Optional>(arena, *from._impl_.value_.optional_type_);
        break;
      case kSparseTensorType:
        _impl_.value_.sparse_tensor_type_ = CreateMaybeMessage<::onnx::TypeProto_SparseTensor>(arena, *from._impl_.value_.sparse_tensor_type_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:onnx.TypeProto)
}
inline PROTOBUF_NDEBUG_INLINE TypeProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : denotation_(arena),
        value_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void TypeProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TypeProto::~TypeProto() {
  // @@protoc_insertion_point(destructor:onnx.TypeProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void TypeProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.denotation_.Destroy();
  if (has_value()) {
    clear_value();
  }
  _impl_.~Impl_();
}

void TypeProto::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:onnx.TypeProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (value_case()) {
    case kTensorType: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.tensor_type_;
      }
      break;
    }
    case kSequenceType: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.sequence_type_;
      }
      break;
    }
    case kMapType: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.map_type_;
      }
      break;
    }
    case kOptionalType: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.optional_type_;
      }
      break;
    }
    case kSparseTensorType: {
      if (GetArena() == nullptr) {
        delete _impl_.value_.sparse_tensor_type_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


PROTOBUF_NOINLINE void TypeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.TypeProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.denotation_.ClearToEmpty();
  clear_value();
  _internal_metadata_.Clear<std::string>();
}

const char* TypeProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 5, 33, 2> TypeProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966854,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_TypeProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // string denotation = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TypeProto, _impl_.denotation_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .onnx.TypeProto.Tensor tensor_type = 1;
    {PROTOBUF_FIELD_OFFSET(TypeProto, _impl_.value_.tensor_type_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .onnx.TypeProto.Sequence sequence_type = 4;
    {PROTOBUF_FIELD_OFFSET(TypeProto, _impl_.value_.sequence_type_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .onnx.TypeProto.Map map_type = 5;
    {PROTOBUF_FIELD_OFFSET(TypeProto, _impl_.value_.map_type_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string denotation = 6;
    {PROTOBUF_FIELD_OFFSET(TypeProto, _impl_.denotation_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
    {PROTOBUF_FIELD_OFFSET(TypeProto, _impl_.value_.sparse_tensor_type_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .onnx.TypeProto.Optional optional_type = 9;
    {PROTOBUF_FIELD_OFFSET(TypeProto, _impl_.value_.optional_type_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::TypeProto_Tensor>()},
    {::_pbi::TcParser::GetTable<::onnx::TypeProto_Sequence>()},
    {::_pbi::TcParser::GetTable<::onnx::TypeProto_Map>()},
    {::_pbi::TcParser::GetTable<::onnx::TypeProto_SparseTensor>()},
    {::_pbi::TcParser::GetTable<::onnx::TypeProto_Optional>()},
  }}, {{
    "\16\0\0\0\12\0\0\0"
    "onnx.TypeProto"
    "denotation"
  }},
};

::uint8_t* TypeProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.TypeProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (value_case()) {
    case kTensorType: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          1, _Internal::tensor_type(this),
          _Internal::tensor_type(this).GetCachedSize(), target, stream);
      break;
    }
    case kSequenceType: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, _Internal::sequence_type(this),
          _Internal::sequence_type(this).GetCachedSize(), target, stream);
      break;
    }
    case kMapType: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, _Internal::map_type(this),
          _Internal::map_type(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  // string denotation = 6;
  if (!this->_internal_denotation().empty()) {
    const std::string& _s = this->_internal_denotation();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.TypeProto.denotation");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  switch (value_case()) {
    case kSparseTensorType: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, _Internal::sparse_tensor_type(this),
          _Internal::sparse_tensor_type(this).GetCachedSize(), target, stream);
      break;
    }
    case kOptionalType: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          9, _Internal::optional_type(this),
          _Internal::optional_type(this).GetCachedSize(), target, stream);
      break;
    }
    default:
      break;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.TypeProto)
  return target;
}

::size_t TypeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.TypeProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string denotation = 6;
  if (!this->_internal_denotation().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_denotation());
  }

  switch (value_case()) {
    // .onnx.TypeProto.Tensor tensor_type = 1;
    case kTensorType: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_.tensor_type_);
      break;
    }
    // .onnx.TypeProto.Sequence sequence_type = 4;
    case kSequenceType: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_.sequence_type_);
      break;
    }
    // .onnx.TypeProto.Map map_type = 5;
    case kMapType: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_.map_type_);
      break;
    }
    // .onnx.TypeProto.Optional optional_type = 9;
    case kOptionalType: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_.optional_type_);
      break;
    }
    // .onnx.TypeProto.SparseTensor sparse_tensor_type = 8;
    case kSparseTensorType: {
      total_size +=
          1 + ::google::protobuf::internal::WireFormatLite::MessageSize(*_impl_.value_.sparse_tensor_type_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void TypeProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TypeProto*>(
      &from));
}

void TypeProto::MergeFrom(const TypeProto& from) {
  TypeProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.TypeProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_denotation().empty()) {
    _this->_internal_set_denotation(from._internal_denotation());
  }
  switch (from.value_case()) {
    case kTensorType: {
      _this->_internal_mutable_tensor_type()->::onnx::TypeProto_Tensor::MergeFrom(
          from._internal_tensor_type());
      break;
    }
    case kSequenceType: {
      _this->_internal_mutable_sequence_type()->::onnx::TypeProto_Sequence::MergeFrom(
          from._internal_sequence_type());
      break;
    }
    case kMapType: {
      _this->_internal_mutable_map_type()->::onnx::TypeProto_Map::MergeFrom(
          from._internal_map_type());
      break;
    }
    case kOptionalType: {
      _this->_internal_mutable_optional_type()->::onnx::TypeProto_Optional::MergeFrom(
          from._internal_optional_type());
      break;
    }
    case kSparseTensorType: {
      _this->_internal_mutable_sparse_tensor_type()->::onnx::TypeProto_SparseTensor::MergeFrom(
          from._internal_sparse_tensor_type());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TypeProto::CopyFrom(const TypeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.TypeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool TypeProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* TypeProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void TypeProto::InternalSwap(TypeProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.denotation_, &other->_impl_.denotation_, arena);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string TypeProto::GetTypeName() const {
  return "onnx.TypeProto";
}

// ===================================================================

class OperatorSetIdProto::_Internal {
 public:
};

OperatorSetIdProto::OperatorSetIdProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.OperatorSetIdProto)
}
inline PROTOBUF_NDEBUG_INLINE OperatorSetIdProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : domain_(arena, from.domain_),
        _cached_size_{0} {}

OperatorSetIdProto::OperatorSetIdProto(
    ::google::protobuf::Arena* arena,
    const OperatorSetIdProto& from)
    : ::google::protobuf::MessageLite(arena) {
  OperatorSetIdProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.version_ = from._impl_.version_;

  // @@protoc_insertion_point(copy_constructor:onnx.OperatorSetIdProto)
}
inline PROTOBUF_NDEBUG_INLINE OperatorSetIdProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : domain_(arena),
        _cached_size_{0} {}

inline void OperatorSetIdProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.version_ = {};
}
OperatorSetIdProto::~OperatorSetIdProto() {
  // @@protoc_insertion_point(destructor:onnx.OperatorSetIdProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void OperatorSetIdProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.domain_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void OperatorSetIdProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.OperatorSetIdProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.domain_.ClearToEmpty();
  _impl_.version_ = ::int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* OperatorSetIdProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 38, 2> OperatorSetIdProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_OperatorSetIdProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    // int64 version = 2;
    {::_pbi::TcParser::FastV64S1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(OperatorSetIdProto, _impl_.version_)}},
    // string domain = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OperatorSetIdProto, _impl_.domain_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string domain = 1;
    {PROTOBUF_FIELD_OFFSET(OperatorSetIdProto, _impl_.domain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 version = 2;
    {PROTOBUF_FIELD_OFFSET(OperatorSetIdProto, _impl_.version_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\27\6\0\0\0\0\0\0"
    "onnx.OperatorSetIdProto"
    "domain"
  }},
};

::uint8_t* OperatorSetIdProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.OperatorSetIdProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    const std::string& _s = this->_internal_domain();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.OperatorSetIdProto.domain");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int64 version = 2;
  if (this->_internal_version() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt64ToArrayWithField<2>(
            stream, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.OperatorSetIdProto)
  return target;
}

::size_t OperatorSetIdProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.OperatorSetIdProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string domain = 1;
  if (!this->_internal_domain().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_domain());
  }

  // int64 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void OperatorSetIdProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OperatorSetIdProto*>(
      &from));
}

void OperatorSetIdProto::MergeFrom(const OperatorSetIdProto& from) {
  OperatorSetIdProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.OperatorSetIdProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OperatorSetIdProto::CopyFrom(const OperatorSetIdProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.OperatorSetIdProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool OperatorSetIdProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* OperatorSetIdProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void OperatorSetIdProto::InternalSwap(OperatorSetIdProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, &other->_impl_.domain_, arena);
        swap(_impl_.version_, other->_impl_.version_);
}

std::string OperatorSetIdProto::GetTypeName() const {
  return "onnx.OperatorSetIdProto";
}

// ===================================================================

class FunctionProto::_Internal {
 public:
};

FunctionProto::FunctionProto(::google::protobuf::Arena* arena)
    : ::google::protobuf::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:onnx.FunctionProto)
}
inline PROTOBUF_NDEBUG_INLINE FunctionProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : input_{visibility, arena, from.input_},
        output_{visibility, arena, from.output_},
        attribute_{visibility, arena, from.attribute_},
        node_{visibility, arena, from.node_},
        opset_import_{visibility, arena, from.opset_import_},
        attribute_proto_{visibility, arena, from.attribute_proto_},
        value_info_{visibility, arena, from.value_info_},
        metadata_props_{visibility, arena, from.metadata_props_},
        name_(arena, from.name_),
        doc_string_(arena, from.doc_string_),
        domain_(arena, from.domain_),
        overload_(arena, from.overload_),
        _cached_size_{0} {}

FunctionProto::FunctionProto(
    ::google::protobuf::Arena* arena,
    const FunctionProto& from)
    : ::google::protobuf::MessageLite(arena) {
  FunctionProto* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:onnx.FunctionProto)
}
inline PROTOBUF_NDEBUG_INLINE FunctionProto::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : input_{visibility, arena},
        output_{visibility, arena},
        attribute_{visibility, arena},
        node_{visibility, arena},
        opset_import_{visibility, arena},
        attribute_proto_{visibility, arena},
        value_info_{visibility, arena},
        metadata_props_{visibility, arena},
        name_(arena),
        doc_string_(arena),
        domain_(arena),
        overload_(arena),
        _cached_size_{0} {}

inline void FunctionProto::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FunctionProto::~FunctionProto() {
  // @@protoc_insertion_point(destructor:onnx.FunctionProto)
  _internal_metadata_.Delete<std::string>();
  SharedDtor();
}
inline void FunctionProto::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.name_.Destroy();
  _impl_.doc_string_.Destroy();
  _impl_.domain_.Destroy();
  _impl_.overload_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void FunctionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:onnx.FunctionProto)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_.Clear();
  _impl_.output_.Clear();
  _impl_.attribute_.Clear();
  _impl_.node_.Clear();
  _impl_.opset_import_.Clear();
  _impl_.attribute_proto_.Clear();
  _impl_.value_info_.Clear();
  _impl_.metadata_props_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.doc_string_.ClearToEmpty();
  _impl_.domain_.ClearToEmpty();
  _impl_.overload_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* FunctionProto::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 5, 83, 2> FunctionProto::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950918,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_FunctionProto_default_instance_._instance,
    ::_pbi::TcParser::GenericFallbackLite,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string input = 4;
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.input_)}},
    // repeated string output = 5;
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.output_)}},
    // repeated string attribute = 6;
    {::_pbi::TcParser::FastUR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.attribute_)}},
    // repeated .onnx.NodeProto node = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.node_)}},
    // string doc_string = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.doc_string_)}},
    // repeated .onnx.OperatorSetIdProto opset_import = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 1, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.opset_import_)}},
    // string domain = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.domain_)}},
    // repeated .onnx.AttributeProto attribute_proto = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 2, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.attribute_proto_)}},
    // repeated .onnx.ValueInfoProto value_info = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 3, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.value_info_)}},
    // string overload = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.overload_)}},
    // repeated .onnx.StringStringEntryProto metadata_props = 14;
    {::_pbi::TcParser::FastMtR1,
     {114, 63, 4, PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.metadata_props_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string input = 4;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.input_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string output = 5;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.output_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string attribute = 6;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.attribute_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated .onnx.NodeProto node = 7;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.node_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string doc_string = 8;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.doc_string_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.OperatorSetIdProto opset_import = 9;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.opset_import_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string domain = 10;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.domain_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.AttributeProto attribute_proto = 11;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.attribute_proto_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .onnx.ValueInfoProto value_info = 12;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.value_info_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string overload = 13;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.overload_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .onnx.StringStringEntryProto metadata_props = 14;
    {PROTOBUF_FIELD_OFFSET(FunctionProto, _impl_.metadata_props_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::onnx::NodeProto>()},
    {::_pbi::TcParser::GetTable<::onnx::OperatorSetIdProto>()},
    {::_pbi::TcParser::GetTable<::onnx::AttributeProto>()},
    {::_pbi::TcParser::GetTable<::onnx::ValueInfoProto>()},
    {::_pbi::TcParser::GetTable<::onnx::StringStringEntryProto>()},
  }}, {{
    "\22\4\5\6\11\0\12\0\6\0\0\10\0\0\0\0"
    "onnx.FunctionProto"
    "name"
    "input"
    "output"
    "attribute"
    "doc_string"
    "domain"
    "overload"
  }},
};

::uint8_t* FunctionProto::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onnx.FunctionProto)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.FunctionProto.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated string input = 4;
  for (int i = 0, n = this->_internal_input_size(); i < n; ++i) {
    const auto& s = this->_internal_input().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.FunctionProto.input");
    target = stream->WriteString(4, s, target);
  }

  // repeated string output = 5;
  for (int i = 0, n = this->_internal_output_size(); i < n; ++i) {
    const auto& s = this->_internal_output().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.FunctionProto.output");
    target = stream->WriteString(5, s, target);
  }

  // repeated string attribute = 6;
  for (int i = 0, n = this->_internal_attribute_size(); i < n; ++i) {
    const auto& s = this->_internal_attribute().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.FunctionProto.attribute");
    target = stream->WriteString(6, s, target);
  }

  // repeated .onnx.NodeProto node = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_node().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string doc_string = 8;
  if (!this->_internal_doc_string().empty()) {
    const std::string& _s = this->_internal_doc_string();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.FunctionProto.doc_string");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // repeated .onnx.OperatorSetIdProto opset_import = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_opset_import_size()); i < n; i++) {
    const auto& repfield = this->_internal_opset_import().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string domain = 10;
  if (!this->_internal_domain().empty()) {
    const std::string& _s = this->_internal_domain();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.FunctionProto.domain");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // repeated .onnx.AttributeProto attribute_proto = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_proto_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute_proto().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .onnx.ValueInfoProto value_info = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_value_info().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string overload = 13;
  if (!this->_internal_overload().empty()) {
    const std::string& _s = this->_internal_overload();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "onnx.FunctionProto.overload");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_props_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata_props().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(
        _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onnx.FunctionProto)
  return target;
}

::size_t FunctionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onnx.FunctionProto)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input = 4;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_input().size());
  for (int i = 0, n = _internal_input().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_input().Get(i));
  }
  // repeated string output = 5;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_output().size());
  for (int i = 0, n = _internal_output().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_output().Get(i));
  }
  // repeated string attribute = 6;
  total_size += 1 * ::google::protobuf::internal::FromIntSize(_internal_attribute().size());
  for (int i = 0, n = _internal_attribute().size(); i < n; ++i) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
        _internal_attribute().Get(i));
  }
  // repeated .onnx.NodeProto node = 7;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->_internal_node()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.OperatorSetIdProto opset_import = 9;
  total_size += 1UL * this->_internal_opset_import_size();
  for (const auto& msg : this->_internal_opset_import()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.AttributeProto attribute_proto = 11;
  total_size += 1UL * this->_internal_attribute_proto_size();
  for (const auto& msg : this->_internal_attribute_proto()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.ValueInfoProto value_info = 12;
  total_size += 1UL * this->_internal_value_info_size();
  for (const auto& msg : this->_internal_value_info()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .onnx.StringStringEntryProto metadata_props = 14;
  total_size += 1UL * this->_internal_metadata_props_size();
  for (const auto& msg : this->_internal_metadata_props()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string doc_string = 8;
  if (!this->_internal_doc_string().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_doc_string());
  }

  // string domain = 10;
  if (!this->_internal_domain().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_domain());
  }

  // string overload = 13;
  if (!this->_internal_overload().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_overload());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::google::protobuf::internal::GetEmptyString).size();
  }
  _impl_._cached_size_.Set(::_pbi::ToCachedSize(total_size));
  return total_size;
}

void FunctionProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FunctionProto*>(
      &from));
}

void FunctionProto::MergeFrom(const FunctionProto& from) {
  FunctionProto* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:onnx.FunctionProto)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_input()->MergeFrom(from._internal_input());
  _this->_internal_mutable_output()->MergeFrom(from._internal_output());
  _this->_internal_mutable_attribute()->MergeFrom(from._internal_attribute());
  _this->_internal_mutable_node()->MergeFrom(
      from._internal_node());
  _this->_internal_mutable_opset_import()->MergeFrom(
      from._internal_opset_import());
  _this->_internal_mutable_attribute_proto()->MergeFrom(
      from._internal_attribute_proto());
  _this->_internal_mutable_value_info()->MergeFrom(
      from._internal_value_info());
  _this->_internal_mutable_metadata_props()->MergeFrom(
      from._internal_metadata_props());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_doc_string().empty()) {
    _this->_internal_set_doc_string(from._internal_doc_string());
  }
  if (!from._internal_domain().empty()) {
    _this->_internal_set_domain(from._internal_domain());
  }
  if (!from._internal_overload().empty()) {
    _this->_internal_set_overload(from._internal_overload());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FunctionProto::CopyFrom(const FunctionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onnx.FunctionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool FunctionProto::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* FunctionProto::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void FunctionProto::InternalSwap(FunctionProto* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_.InternalSwap(&other->_impl_.input_);
  _impl_.output_.InternalSwap(&other->_impl_.output_);
  _impl_.attribute_.InternalSwap(&other->_impl_.attribute_);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  _impl_.opset_import_.InternalSwap(&other->_impl_.opset_import_);
  _impl_.attribute_proto_.InternalSwap(&other->_impl_.attribute_proto_);
  _impl_.value_info_.InternalSwap(&other->_impl_.value_info_);
  _impl_.metadata_props_.InternalSwap(&other->_impl_.metadata_props_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.doc_string_, &other->_impl_.doc_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, &other->_impl_.domain_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.overload_, &other->_impl_.overload_, arena);
}

std::string FunctionProto::GetTypeName() const {
  return "onnx.FunctionProto";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace onnx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
