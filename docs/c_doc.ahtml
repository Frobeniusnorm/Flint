@include("header.html")
  <div id="header-bar">
    <div class="left-spaced">
      <img src="flint.png" style="width:5.2em; height:3em; display: inline-block; vertical-align: middle;" />
      <a class="item" href="index.html">About</a>
      <a class="item selected" href="documentation.html">Documentation</a>
      <a class="item" href="tutorial.html">Tutorial</a>
    </div>
  </div>
  <div id="showcase_background" style="min-height: 18em; background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(153,213,23,1) 0%, rgba(0,179,255,1) 100%);">
    <center style="margin-top:2em">
      <h1>
        Documentation <u>flint.h</u>
      </h1>
    </center>
  </div>
  <center>
    <div class="content" style="margin-top: -3.1em">
        <div class="card" style="padding: 20px 15px">
          This file contains information about the general use of Flint in its C compatibility mode. Remember to set the CMake flag, s.t. no Exceptions are thrown.
          Instead the function will return <div class="card" style="padding: 20px 15px">NULL</div>, and set the errno (see the error related functions of flint for
          more context).
          <div style="display: block; height: 2em;"></div>
          In general all operations that take two parameters of equal shape (like e.g.
          addition, division, minimum, equal etc.) allow normal and inverse broadcasting.
          <ul>
            <li> normal broadcasting: a node with shape [4, 6, 8] can be broadcasted to a
            node with shape [2, 4, 6, 8] by repeating the first node 2 times in the
            first dimension. </li>
            <li> inverse broadcasting: a node with shape [2, 4, 6] can be broadcasted to a
            node with shape [2, 4, 6, 8] by repeating the first node 8 times in the last
            dimension. </li>
          </ul>
          E.g.
          @code{
          float data_a[] = {0, 1, 2,
                            3, 4, 5};
          size_t shape_a[] = {2, 3};
          float data_b[] = {2, 4, 6};
          size_t shape_b = 3;
          FGraphNode* a = fCreateGraph((void*)data_a, 6, F_FLOAT32, shape_a, 2);
          FGraphNode* b = fCreateGraph((void*)data_b, 3, F_FLOAT32, &shape_b, 1);
          FGraphNode* c = fmul(a, b); // {{2, 5, 8}, {5, 8, 11}}
          }
          <br/>
          Broadcasting is implemented without repeating the data, but by directly
          accessing it.
        </div>
        <div style="display: block; height: 2em;"></div>
        @gen_toc("../flint.h")
        <div style="display: block; height: 2em;"></div>
        <div class="card attention_box" style="padding: 20px 15px; background-color: #f4bfbf;">
          The C-Backend has a memory management system optimized for easy usage in C++, which makes it a little bit weird in C.
          It uses reference counting for all nodes, but the initial counter is set to 0 and increased when connected to another node.
          <pre class="code" style="padding: 2px; margin: 5px; font-size: 1em">@code{
FGraphNode *gn1 = fCreateGraph(...); // counter is 0
FGraphNode *gn2 = fCreateGraph(...); // counter is 0
FGraphNode *gn3 = fadd(gn1, gn2); // counter of gn3 is 0, of gn1 is 1 and of gn2 is 1}
          </pre>
          The reason for that is that a call to <pre class="inline_code">fFreeGraph</pre> does not decrease the reference counter but frees the node when it is already 0.
          If a node is freed the method can be recursively called for all its parents, in the example if one calls <pre class="inline_code">fFreeGraph(gn3)</pre>, <pre class="inline_code">gn1</pre> and <pre class="inline_code">gn2</pre> are freed too. This is important when calling <pre class="inline_code">fOptimizeMemory</pre> for e.g. <pre class="inline_code">gn3</pre>, which is allowed to free parental informations when no longer needed.
          Since in that case <pre class="inline_code">gn1</pre> and <pre class="inline_code">gn2</pre> have a reference counter of 1 depending on <pre class="inline_code">gn3</pre> they could no longer be used after a call to <pre class="inline_code">fOptimizeMemory(gn3)</pre>, to prevent that you have to artifically manipulate the reference counter for nodes in such a context by calling <pre class="inline_code">gn1->reference_counter++</pre>.
        </div>
        <div style="display: block; height: 2em;"></div>
        @from_code("../flint.h")
    </div>
</center>
@include("footer.html")
