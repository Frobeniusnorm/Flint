@include("header.html")
  <div id="header-bar">
    <div class="left-spaced">
      <img src="flint.png" style="width:5.2em; height:3em; display: inline-block; vertical-align: middle;" />
      <a class="item" href="index.html">About</a>
      <a class="item" href="documentation.html">Documentation</a>
      <a class="item selected" href="tutorial.html">Tutorial</a>
    </div>
  </div>
  <div id="showcase_background" style="min-height: 18em; background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(195,225,100,1) 0%, rgba(50,228,100,1) 100%);">
    <center style="margin-top:2em">
      <h1>
        Tutorial - C++
      </h1>
    </center>
  </div>
  <center>
    <div class="content" style="margin-top: -3.1em">
      <div class="card">
        <span class="card_header">C++ Tutorial</span>
      </div><br />
      <div class="card" style="padding: 20px 15px">
        <ul>
          <li><a href="#init">Initialization and Cleanup</a></li>
          <li><a href="#tensor">The Tensor Class</a></li>
        </ul>
      </div>

      <div style="display: block; height: 2em;" id="init"></div>
      <div class="card">
        <div class="card_header_code">
          Initialization
        </div>
      </div>
      <div class="card" style="padding: 20px 20px;">
        Although initialization of the framework can happen implicitly the shutdown still has to be done explicitly to allow the backends to deallocate memory and shut down threads.
        This can be done with a single call:<br/>
        @code{
flintCleanup();
        }
        <br/>
        Initialization allows to start specific backends. 
        If only one of both is started only this one will be used.
        If both are started, both will be used (which of both for an execution is determined by heuristics). 
        If you don't start a backend, both will be initialized implicitly upon the first execution.
        <br/>
        @code{
flintInit(FLINT_BACKEND_ONLY_CPU); // init only cpu backend
flintInit(FLINT_BACKEND_ONLY_GPU); // init only gpu backend
flintInit(FLINT_BACKEND_BOTH); // init both 
        }
        <br/>
        Instead of those single calls it is also possible to create a context object that initializes the backends upon creation and cleans them up upon destruction:
        <br/>
        @code{
FlintContext _(FLINT_BACKEND_ONLY_GPU);
// your Flint code here
        }
        <br/>
        You can modify the execution strategy (eager or uneager) and logging mode with:
        <br/>
        @code{
fEnableEagerExecution();
fDisableEagerExecution();
fSetLoggingLevel(F_WARNING);
fSetLoggingLevel(F_INFO);
fSetLoggingLevel(F_VERBOSE);
        }
      </div>

      <div style="display: block; height: 2em;" id="tensor"></div>
      <div class="card">
        <div class="card_header_code">
          The Tensor Class
        </div>
      </div>
      <div class="card" style="padding: 20px 20px;">
        Flint's central datastructure in the C++ frontend is the Tensor class. 
        The Tensor class binds its rank or dimensionality (the number of dimensions) and the underlying type of its data to its type as templates.
        You can initialize it with a std::vector or an initializer list:
        <br/>
        @code{
Tensor<float, 2> t1 = {{0.5f, 0.9f}, {2.3f, 3.1f}};
        }
        <br/>
        The data is essentially immutable for a Tensor, meaning if you want to modify it, you need to create a new one:
        <br/>
        @code{
Tensor<float, 2> t2 = t1 + 1;
        }
        <br/>
        You can directly pass a Tensor to a stream, but keep uneager execution on your mind, because then no data will be available.
        To avoid that you can implicitly execute a Tensor with the call operator:
        <br/>
        @code{
std::cout << t1 << std::endl;
// Tensor<FLOAT32, shape: [2, 2]>(
// [[0.500000, 0.900000],
//  [2.300000, 3.100000]])
std::cout << t2 << std::endl;
// Tensor<FLOAT32, shape: [2, 2]>(<not yet executed>)
std::cout << t2() << std::endl;
// Tensor<FLOAT32, shape: [2, 2]>(
// [[1.500000, 1.900000],
//  [3.300000, 4.100000]])
        }
        <br/>
        But be careful with the execute operator, since it returns a reference to the object itself! Meaning code like<br/>
        @code{
do_something_with_it((t1 + t2)());
        }
        <br/>
        could lead to possible memory problems! 
        This can be avoided with explicit calls to .execute() and local variables (so that the Tensor is binded). <br/>
        You can query elements of a Tensor with the indexing operator, if the Tensor was not executed it will be implicitly: <br/>
        @code{
std::cout << t1[0][1] << std::endl; // 0.9
std::cout << t2[1][1] << std::endl; // 4.1
        }
        <br/>
        or you can convert the Tensor completly to a vector with the * operator (of course less efficient then single indexing calls):
        <br/>
        @code{
std::vector<std::vector<float>> v1 = *t1;
        }
        <br/>
        The Tensor class supports move operations (which will be essentially free performance and memory wise) and copy operations, that have to copy
        the complete graph structure and result data, which are therefore very inefficient (and to be avoided wherever possible).
        <h4>Generating Data</h4>
        Most of the times you want to generate your Tensors from constants, random values or load it from files:
        <br/>
        @code{
Tensor<int, 3> zeros = Flint::constant(0, 3, 2, 3); 
// Tensor<INT32, shape: [3, 2, 3]>(
// [[[0, 0, 0],
//   [0, 0, 0]],
//  [[0, 0, 0],
//   [0, 0, 0]],
//  [[0, 0, 0],
//   [0, 0, 0]]])
Tensor<int, 3> zeros_alt = Flint::constant_array(0, std::array<size_t, 3>{3, 2, 3}); 
// same as zeros, for cases were variadic templates isn't what you want
Tensor<double, 3> randoms = Flint::random(3, 2, 2); // in [0, 1)
// Tensor<FLOAT64, shape: [3, 2, 2]>(
// [[[0.695820, 0.287424],
//   [0.395240, 0.838207]],
//  [[0.089141, 0.703297],
//   [0.589048, 0.043032]],
//  [[0.565522, 0.398417],
//   [0.365827, 0.633404]]])
Tensor<double, 3> randoms_alt = Flint::random_array(std::array<size_t, 3>{3, 2, 2});
// same as randoms
        }
        <br/>
        You can store and load a Tensor into a binary file:
        <br/>
        @code{
// store to file
std::ofstream my_store("zeros.flint");
my_store << zeros;
my_store.close();
// load from file
std::ifstream my_load("zeros.flint");
Tensor<double, 3> loaded = Tensor<double, 3>::read_from(my_load);
my_load.close();
        }
        <br/>
        and load and store images to and from Tensors:
        <br/>
        @code{
Tensor<float, 3> img = Flint::load_image("icon.png"); // height, width, channels
// values are between 0 and 1, channels are 4 for rgba, 3 for rgb, 1 for greyscale, ...
Flint::store_image(img, "icon2.png", F_PNG); 
// has to have the data format as third argument
        }
      </div>
    </div>
  </center>
@include("footer.html")
