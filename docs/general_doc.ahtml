@include("header.html")
  <div id="header-bar">
    <div class="left-spaced">
      <img src="flint.png" style="width:5.2em; height:3em; display: inline-block; vertical-align: middle;" />
      <a class="item" href="index.html">About</a>
      <a class="item selected" href="documentation.html">Documentation</a>
      <a class="item">Tutorial</a>
    </div>
  </div>
  <div id="showcase_background" style="min-height: 18em; background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(195,225,100,1) 0%, rgba(50,228,100,1) 100%);">
    <center style="margin-top:2em">
      <h1>
        Documentation - General Usage
      </h1>
    </center>
  </div>
  <center>
    <div class="content" style="margin-top: -3.1em">
        <div class="card">
          <span class="card_header">General Usage</span>
        </div><br />
        <div class="card" style="padding: 20px 15px">
          <ul>
            <li><a href="#general">What does Flint do</a></li>
            <li><a href="#execution">Execution of Tensors</a></li>
            <li><a href="#data">Data Management and Initialization</a></li>
          </ul>
        </div>
        <div style="display: block; height: 2em;" id="general"></div>
        <div class="card">
          <div class="card_header_code">
            What does Flint do?
          </div>
        </div>
        <div class="card" style="padding: 20px 20px;">
          Flint provides you with a Framework to create and manipulate Tensors. Tensors are just multidimensional data arrays with the same shape along each dimension.
          A Vector or a Matrix are Tensors too. You can create a 6-dimensional Tensor with the shape of 256, 128, 64, 32, 1024, 53 (here shape is always denoted from inner to outer, so 256 is the outer most dimension).<br/>
          The great thing about Flint: you can apply operations to those Tensor, for example addition, multiplication, you can convolve Tensor, do Matrix multiplication and so on.<br/> 
          Flint is then able to execute those operations, which are stored in an operational graph.<br/> (a graph were each node either represents a data node (so it stores data you calculated or put there) or a operation itself, that has been executed or still has to be executed. Those nodes can be connected in a graph: e.g. if you sum up to nodes A and B to the result C, the node C is the child of its parents A and B).<br/>
          <center><img src="operational_graph_ex1.png" width="410" height="262"/></center><br/>
          Allthough if you use the C++ frontend you won't get in touch too much with this graph it enables efficient gradient calculation which is the core functionality for machine learning
          in a Tensor Execution framework. You can execute these Tensor on your CPU or on a OpenCL capable device like a GPU, for more see the Execution section.<br/>
          Flint provides an automatic memory management system for your Tensors and all their allocated data with reference counting in the graph, for more see the Data section.<br/>
        </div>
        
        <div style="display: block; height: 2em;" id="execution"></div>
        <div class="card">
          <div class="card_header_code">
            Execution of Tensors
          </div>
        </div><br/>
        <div class="card" style="padding: 20px 20px;">
          There are two different backends for the execution of Operations with two different execution strategies.
          <ul>
            <li><b>Lazy Execution</b>: the nodes are only executed if the operation enforces it (e.g. matrix multiplication or reduction enforces complete execution of the parental nodes) 
            or `fExecuteGraph` (in C) or `.execute()` (in C++) is called. 
            Else the graph is constructed with the operations, but the result data is only calculated for a node if it is executed.
            <div class="spacer2"></div>
              <ul>
                <li><b>CPU Backend</b><br/> A simple thread pool that is initialized with as many threads as your CPU supports.
                The calculation of a operation may be split into multiple work packages that are then distributed to the threads.<br/>
                In the case that parental nodes don't have result data yet, those are executed first 
                (i.e. the unexecuted parental subtree of the node is executed sequentially in its topological order).<br/>
                Fast for small Tensors or lightweight operations since the overhead is little.
                <div class="spacer2"></div>
                </li>
                <li><b>OpenCL Backend</b><br> Constructs a OpenCL kernel for the complete unexecuted graph and executes it (has a cache to lookup and store already compiled kernels).
                This allows implicit execution of only those parts of the parental data of a node that are actually important for the last node. E.g.
                @code{
Tensor<float, 3> m1 = Tensor<float, 3>::constant(3.141592, 128, 128, 128);
Tensor<float, 3> m2 = Tensor<float, 3>::constant(42.0007, 128, 128, 128);
Tensor<float, 3> m3 = m1.matmul(m2).slice(TensorRange(0, 4), TensorRange(0, 4), TensorRange(0, 2));
m3.execute();
                }</br>
                Here it is possible for the GPU Backend to lazily only compute the 4*4*2 elements of m3 and their corresponding elements in the Matrix multiplication without having to calculate
                the other 2097120 elements (128*128*128 = 2097152 elements).
                </li>
              </ul>
              <div class="spacer2"></div>
            </li>
            <li>
              <b>Eager Execution</b>: Each node has to be executed during construction. The OpenCL backend then resorts to the generation of general operation kernels for each operation
              (one program per operation, one kernel per possible datatype combination of the parameters).<br/>
              This reduces the overhead of the CPU Backend alot but interferes alot with OpenCL optimizations.
            </li>
          </ul>
          <img src="graph.png"/><br/>
          <small><i>Benchmarks of example programs on an Intel i5 10600K and an AMD Radeon 5700XT,<br/> time in milliseconds</i></small>
          <div class="spacer2"></div>
          As one can see from the benchmarks especially for many small operations eager execution is better for the CPU backend since the performance load is better distributed
          and it has much less overhead. For the GPU backend lazy execution is far better. The best overall performance is achieved with activating both backends without eager execution, 
          where Flint chooses one by some heuristics. This yields currently a few milliseconds, but with some additional optimizations i am working on it might be much more.
        </div>
        <div style="display: block; height: 2em;" id="data"></div>
        <div class="card">
          <div class="card_header_code">
            Data Management and Initialization
          </div>
        </div><br/>
        <div class="card" style="padding: 20px 20px;">
          Flint needs to be initialized and cleaned up. Initialization can be done implicitly (when no backend had been initialized during a call to an execution method the corresponding or both backends will be initialized). It is possible to initialize only one of the two backends or both in which case Flint is allowed to choose one in the execute call.<br/>
          When you are done using Flint, the backends need the oportunity to shut down started threads and free memory. Use the cleanup Method for that.
          <div class="spacer"></div>
          In C any memory needed to store the Tensors is allocated by the framework itself. Additionally to allow function calls like<br/>
          @code{
fdiv(fsub(a, b), a)
          }<br/>
          reference counting is used in the nodes to keep track which node is still used.
          Freeing one node tries to free its predecessors too if their reference counter becomes zero. 
          Keep in mind that this implies that function calls like <pre class="inline_code">fCreateGraph, fadd, ...</pre> are not allowed to
          return a counted reference i.e.<br/>
          @code{
FGraphNode* a = fCreateGraph(...);
FGraphNode* b = fCreateGraph(...);
FGraphNode* c = fadd(a,b);
fFreeGraph(c);
          }<br/>
          would free the memory behind a and b too. This is necessary because else<br/>
          @code{
FGraphNode* c = fadd(fCreateGraph(...),fCreateGraph(...));
fFreeGraph(c);
          }<br/>
          would produce a memory leak. You can circumvent such problems by artifically modifying the <pre class="inline_code">reference_counter</pre>
          member of the nodes. In C++ the constructors and destructors automatically solve all of the above for you, just keep in mind that copying Tensors is expensive.
          <div class="spacer"></div>
          Each node and each Tensor may have Result Data which holds either a OpenCL memory handle or memory pointer in RAM (or both) of the data yielded by the execution of the node. This data is freed with the node or Tensor.
        </div>
    </div>
</center>
@include("footer.html")
