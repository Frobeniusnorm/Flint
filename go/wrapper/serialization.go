package wrapper

// #include <flint/flint.h>
import "C"
import "unsafe"

/*
Serialize the data and shape of the node and returns an array of bytes, in which the serialized data will be written.
*/
func Serialize(node GraphNode) ([]byte, error) {
	var size C.size_t
	ptr, errno := C.fserialize(node.ref, &size)
	defer C.free(unsafe.Pointer(ptr))
	if ptr == nil {
		return []byte{}, buildErrorFromErrno(errno)
	}
	return C.GoBytes(unsafe.Pointer(ptr), C.int(size)), nil
}

/*
Deserialize un-serializes data generated by [Serialize].
The size of the data is stored in itself, therefore no extra parameters are needed.
*/
func Deserialize(data []byte) (GraphNode, error) {
	unsafeData := C.CBytes(data)
	defer C.free(unsafe.Pointer(unsafeData))

	bytesRead := C.size_t(0)
	// this cast is necessary as the binary data needs to be passed as char*.
	flintNode, errno := C.fdeserialize((*C.char)(unsafeData), &bytesRead)
	return returnHelper(flintNode, errno)
}
